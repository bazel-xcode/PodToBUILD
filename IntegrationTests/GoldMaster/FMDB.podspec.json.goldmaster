load(
  "//Vendor/rules_pods/BazelExtensions:extensions.bzl",
  "pch_with_name_hint",
  "acknowledged_target",
  "gen_module_map",
  "gen_includes",
  "headermap"
)
# Add a config setting release for compilation mode
# Assume that people are using `opt` for release mode
# see the bazel user manual for more information
# https://docs.bazel.build/versions/master/be/general.html#config_setting
config_setting(
  name = "release",
  values = {
    "compilation_mode": "opt"
  }
)
config_setting(
  name = "osxCase",
  values = {
    "apple_platform_type": "macos"
  }
)
config_setting(
  name = "tvosCase",
  values = {
    "apple_platform_type": "tvos"
  }
)
config_setting(
  name = "watchosCase",
  values = {
    "apple_platform_type": "watchos"
  }
)
filegroup(
  name = "FMDB_hdrs",
  srcs = glob(
    [
      "pod_support/Headers/Public/**/*"
    ],
    exclude_directories = 1
  ) + [
    ":standard_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "FMDB_hmap",
  namespace = "FMDB",
  hdrs = [
    ":FMDB_hdrs"
  ],
  deps = [
    ":standard"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "FMDB_includes",
  include = [
    "Vendor/FMDB/pod_support/Headers/Public/"
  ]
)
gen_module_map(
  "FMDB",
  "FMDB_module_map",
  "FMDB",
  [
    "FMDB_hdrs"
  ]
)
objc_library(
  name = "FMDB",
  enable_modules = 0,
  hdrs = [
    ":FMDB_hdrs"
  ],
  pch = pch_with_name_hint(
    "FMDB",
    []
  ),
  deps = [
    ":standard",
    ":FMDB_includes"
  ],
  copts = select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/FMDB/pod_support/Headers/Public/FMDB/"
  ] + [
    "-fmodule-name=FMDB_pod_module"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "FMDB_acknowledgement",
  deps = [],
  value = "//Vendor/FMDB/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "standard_hdrs",
  srcs = glob(
    [
      "src/fmdb/FM*.h"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "standard_union_hdrs",
  srcs = [
    "standard_hdrs",
    "FMDB_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "standard_hmap",
  namespace = "FMDB",
  hdrs = [
    ":standard_union_hdrs"
  ],
  deps = [],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "standard_includes",
  include = [
    "Vendor/FMDB/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "standard",
  enable_modules = 0,
  srcs = glob(
    [
      "src/fmdb/FM*.m"
    ],
    exclude = [
      "src/fmdb.m"
    ] + glob(
      [
        "src/extra/fts3/*.m"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  hdrs = [
    ":standard_union_hdrs"
  ],
  pch = pch_with_name_hint(
    "FMDB",
    glob(
      [
        "src/**/*.pch"
      ],
      exclude_directories = 1
    )
  ),
  sdk_dylibs = [
    "sqlite3"
  ],
  deps = [
    ":standard_includes"
  ],
  copts = select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/FMDB/pod_support/Headers/Public/FMDB/"
  ] + [
    "-fmodule-name=FMDB_pod_module"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "standard_acknowledgement",
  deps = [],
  value = "//Vendor/FMDB/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "FTS_hdrs",
  srcs = glob(
    [
      "src/extra/fts3/*.h"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "FTS_union_hdrs",
  srcs = [
    "FTS_hdrs",
    "FMDB_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "FTS_hmap",
  namespace = "FMDB",
  hdrs = [
    ":FTS_union_hdrs"
  ],
  deps = [
    ":standard"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "FTS_includes",
  include = [
    "Vendor/FMDB/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "FTS",
  enable_modules = 0,
  srcs = glob(
    [
      "src/extra/fts3/*.m"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":FTS_union_hdrs"
  ],
  pch = pch_with_name_hint(
    "FMDB",
    glob(
      [
        "src/**/*.pch"
      ],
      exclude_directories = 1
    )
  ),
  deps = [
    ":standard",
    ":FTS_includes"
  ],
  copts = select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/FMDB/pod_support/Headers/Public/FMDB/"
  ] + [
    "-fmodule-name=FMDB_pod_module"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "FTS_acknowledgement",
  deps = [],
  value = "//Vendor/FMDB/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "standalone_hdrs",
  srcs = [],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "standalone_union_hdrs",
  srcs = [
    "standalone_hdrs",
    "FMDB_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "standalone_hmap",
  namespace = "FMDB",
  hdrs = [
    ":standalone_union_hdrs"
  ],
  deps = [],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "standalone_includes",
  include = [
    "Vendor/FMDB/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "standalone",
  enable_modules = 0,
  hdrs = [
    ":standalone_union_hdrs"
  ],
  pch = pch_with_name_hint(
    "FMDB",
    []
  ),
  deps = [
    ":standalone_includes"
  ],
  copts = [
    "-DFMDB_SQLITE_STANDALONE"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/FMDB/pod_support/Headers/Public/FMDB/"
  ] + [
    "-fmodule-name=FMDB_pod_module"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "standalone_acknowledgement",
  deps = [],
  value = "//Vendor/FMDB/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "standalone_default_hdrs",
  srcs = glob(
    [
      "src/fmdb/FM*.h"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "standalone_default_union_hdrs",
  srcs = [
    "standalone_default_hdrs",
    "FMDB_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "standalone_default_hmap",
  namespace = "FMDB",
  hdrs = [
    ":standalone_default_union_hdrs"
  ],
  deps = [
    "//Vendor/sqlite3:sqlite3"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "standalone_default_includes",
  include = [
    "Vendor/FMDB/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "standalone_default",
  enable_modules = 0,
  srcs = glob(
    [
      "src/fmdb/FM*.m"
    ],
    exclude = [
      "src/fmdb.m"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":standalone_default_union_hdrs"
  ],
  pch = pch_with_name_hint(
    "FMDB",
    glob(
      [
        "src/**/*.pch"
      ],
      exclude_directories = 1
    )
  ),
  deps = [
    "//Vendor/sqlite3:sqlite3",
    ":standalone_default_includes"
  ],
  copts = [
    "-DFMDB_SQLITE_STANDALONE"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/FMDB/pod_support/Headers/Public/FMDB/"
  ] + [
    "-fmodule-name=FMDB_pod_module"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "standalone_default_acknowledgement",
  deps = [
    "//Vendor/sqlite3:sqlite3_acknowledgement"
  ],
  value = "//Vendor/FMDB/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "standalone_FTS_hdrs",
  srcs = glob(
    [
      "src/extra/fts3/*.h",
      "src/fmdb/FM*.h"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "standalone_FTS_union_hdrs",
  srcs = [
    "standalone_FTS_hdrs",
    "FMDB_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "standalone_FTS_hmap",
  namespace = "FMDB",
  hdrs = [
    ":standalone_FTS_union_hdrs"
  ],
  deps = [
    "//Vendor/sqlite3:fts"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "standalone_FTS_includes",
  include = [
    "Vendor/FMDB/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "standalone_FTS",
  enable_modules = 0,
  srcs = glob(
    [
      "src/extra/fts3/*.m",
      "src/fmdb/FM*.m"
    ],
    exclude = [
      "src/fmdb.m"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":standalone_FTS_union_hdrs"
  ],
  pch = pch_with_name_hint(
    "FMDB",
    glob(
      [
        "src/**/*.pch"
      ],
      exclude_directories = 1
    )
  ),
  deps = [
    "//Vendor/sqlite3:fts",
    ":standalone_FTS_includes"
  ],
  copts = [
    "-DFMDB_SQLITE_STANDALONE"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/FMDB/pod_support/Headers/Public/FMDB/"
  ] + [
    "-fmodule-name=FMDB_pod_module"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "standalone_FTS_acknowledgement",
  deps = [
    "//Vendor/sqlite3:fts_acknowledgement"
  ],
  value = "//Vendor/FMDB/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "SQLCipher_hdrs",
  srcs = glob(
    [
      "src/fmdb/FM*.h"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "SQLCipher_union_hdrs",
  srcs = [
    "SQLCipher_hdrs",
    "FMDB_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "SQLCipher_hmap",
  namespace = "FMDB",
  hdrs = [
    ":SQLCipher_union_hdrs"
  ],
  deps = [
    "//Vendor/SQLCipher:SQLCipher"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "SQLCipher_includes",
  include = [
    "Vendor/FMDB/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "SQLCipher",
  enable_modules = 0,
  srcs = glob(
    [
      "src/fmdb/FM*.m"
    ],
    exclude = [
      "src/fmdb.m"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":SQLCipher_union_hdrs"
  ],
  pch = pch_with_name_hint(
    "FMDB",
    glob(
      [
        "src/**/*.pch"
      ],
      exclude_directories = 1
    )
  ),
  deps = [
    "//Vendor/SQLCipher:SQLCipher",
    ":SQLCipher_includes"
  ],
  copts = [
    "-DHAVE_USLEEP=1",
    "-DSQLITE_HAS_CODEC"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/FMDB/pod_support/Headers/Public/FMDB/"
  ] + [
    "-fmodule-name=FMDB_pod_module"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "SQLCipher_acknowledgement",
  deps = [
    "//Vendor/SQLCipher:SQLCipher_acknowledgement"
  ],
  value = "//Vendor/FMDB/pod_support_buildable:acknowledgement_fragment"
)
