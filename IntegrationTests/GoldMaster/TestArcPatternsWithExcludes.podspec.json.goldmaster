load(
  "//Vendor/rules_pods/BazelExtensions:extensions.bzl",
  "acknowledged_target",
  "gen_module_map",
  "gen_includes",
  "headermap",
  "umbrella_header"
)
# Add a config setting release for compilation mode
# Assume that people are using `opt` for release mode
# see the bazel user manual for more information
# https://docs.bazel.build/versions/master/be/general.html#config_setting
config_setting(
  name = "release",
  values = {
    "compilation_mode": "opt"
  }
)
config_setting(
  name = "osxCase",
  values = {
    "apple_platform_type": "macos"
  }
)
config_setting(
  name = "tvosCase",
  values = {
    "apple_platform_type": "tvos"
  }
)
config_setting(
  name = "watchosCase",
  values = {
    "apple_platform_type": "watchos"
  }
)
filegroup(
  name = "TestArcPatternsWithExcludes_package_hdrs",
  srcs = [
    "TestArcPatternsWithExcludes_direct_hdrs",
    "Core_direct_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "TestArcPatternsWithExcludes_direct_hdrs",
  srcs = glob(
    [
      "pod_support/Headers/Public/**/*"
    ]
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "TestArcPatternsWithExcludes_public_hdrs",
  srcs = [
    ":Core_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "FBSDKCoreKit_hdrs",
  srcs = glob(
    [
      "pod_support/Headers/Public/**/*"
    ]
  ) + [
    ":Core_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "TestArcPatternsWithExcludes_hmap",
  namespace = "FBSDKCoreKit",
  hdrs = [
    "TestArcPatternsWithExcludes_package_hdrs",
    ":FBSDKCoreKit_hdrs"
  ],
  deps = [
    ":Core_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "TestArcPatternsWithExcludes_includes",
  include = [
    "Vendor/TestArcPatternsWithExcludes/pod_support/Headers/Public/"
  ]
)
alias(
  name = "FBSDKCoreKit",
  actual = "TestArcPatternsWithExcludes",
  visibility = [
    "//visibility:public"
  ]
)
objc_library(
  name = "TestArcPatternsWithExcludes",
  enable_modules = 0,
  hdrs = [
    ":FBSDKCoreKit_hdrs"
  ],
  pch = "pod_support/Headers/Private/TestArcPatternsWithExcludes-prefix.pch",
  deps = [
    ":Core",
    ":TestArcPatternsWithExcludes_includes"
  ],
  copts = [
    "-fobjc-weak"
  ] + select(
    {
      "//conditions:default": [
        "-DDEBUG=1",
        "-DPOD_CONFIGURATION_DEBUG=1"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1"
      ]
    }
  ) + [
    "-IVendor/TestArcPatternsWithExcludes/pod_support/Headers/Public/FBSDKCoreKit/"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "TestArcPatternsWithExcludes_acknowledgement",
  deps = [],
  value = "//Vendor/TestArcPatternsWithExcludes/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "Core_direct_hdrs",
  srcs = select(
    {
      "//conditions:default": glob(
        [
          "pod_support/Headers/Public/**/*"
        ] + glob(
          [
            "**/*.h"
          ],
          exclude = [
            "CORE_EXCLUDE/**/*.h",
            "CORE_EXCLUDE_IOS/**/*.h"
          ]
        )
      ),
      ":osxCase": glob(
        [
          "pod_support/Headers/Public/**/*"
        ] + glob(
          [
            "**/*.h"
          ],
          exclude = [
            "CORE_EXCLUDE/**/*.h"
          ]
        )
      ),
      ":tvosCase": glob(
        [
          "pod_support/Headers/Public/**/*"
        ] + glob(
          [
            "**/*.h"
          ],
          exclude = [
            "CORE_EXCLUDE/**/*.h",
            "CORE_EXCLUDE_TV/**/*.h"
          ]
        )
      ),
      ":watchosCase": glob(
        [
          "pod_support/Headers/Public/**/*"
        ] + glob(
          [
            "**/*.h"
          ],
          exclude = [
            "CORE_EXCLUDE/**/*.h"
          ]
        )
      )
    }
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Core_public_hdrs",
  srcs = glob(
    [
      "**/*.h"
    ]
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Core_hdrs",
  srcs = select(
    {
      "//conditions:default": glob(
        [
          "pod_support/Headers/Public/**/*"
        ] + glob(
          [
            "**/*.h"
          ],
          exclude = [
            "CORE_EXCLUDE/**/*.h",
            "CORE_EXCLUDE_IOS/**/*.h"
          ]
        )
      ),
      ":osxCase": glob(
        [
          "pod_support/Headers/Public/**/*"
        ] + glob(
          [
            "**/*.h"
          ],
          exclude = [
            "CORE_EXCLUDE/**/*.h"
          ]
        )
      ),
      ":tvosCase": glob(
        [
          "pod_support/Headers/Public/**/*"
        ] + glob(
          [
            "**/*.h"
          ],
          exclude = [
            "CORE_EXCLUDE/**/*.h",
            "CORE_EXCLUDE_TV/**/*.h"
          ]
        )
      ),
      ":watchosCase": glob(
        [
          "pod_support/Headers/Public/**/*"
        ] + glob(
          [
            "**/*.h"
          ],
          exclude = [
            "CORE_EXCLUDE/**/*.h"
          ]
        )
      )
    }
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Core_union_hdrs",
  srcs = [
    "Core_hdrs",
    "FBSDKCoreKit_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "Core_hmap",
  namespace = "FBSDKCoreKit",
  hdrs = [
    "TestArcPatternsWithExcludes_package_hdrs",
    ":Core_union_hdrs"
  ],
  deps = [],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "Core_includes",
  include = [
    "Vendor/TestArcPatternsWithExcludes/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "Core",
  enable_modules = 0,
  srcs = select(
    {
      "//conditions:default": glob(
        [
          "POD_REQUIRES_ARC/*.m"
        ],
        exclude = glob(
          [
            "POD_REQUIRES_ARC/*.m"
          ],
          exclude = glob(
            [
              "**/*.m"
            ],
            exclude = [
              "CORE_EXCLUDE/**/*.m",
              "CORE_EXCLUDE_IOS/**/*.m"
            ]
          )
        )
      ),
      ":osxCase": glob(
        [
          "POD_REQUIRES_ARC/*.m"
        ],
        exclude = glob(
          [
            "POD_REQUIRES_ARC/*.m"
          ],
          exclude = glob(
            [
              "**/*.m"
            ],
            exclude = [
              "CORE_EXCLUDE/**/*.m"
            ]
          )
        )
      ),
      ":tvosCase": glob(
        [
          "POD_REQUIRES_ARC/*.m"
        ],
        exclude = glob(
          [
            "POD_REQUIRES_ARC/*.m"
          ],
          exclude = glob(
            [
              "**/*.m"
            ],
            exclude = [
              "CORE_EXCLUDE/**/*.m",
              "CORE_EXCLUDE_TV/**/*.m"
            ]
          )
        )
      ),
      ":watchosCase": glob(
        [
          "POD_REQUIRES_ARC/*.m"
        ],
        exclude = glob(
          [
            "POD_REQUIRES_ARC/*.m"
          ],
          exclude = glob(
            [
              "**/*.m"
            ],
            exclude = [
              "CORE_EXCLUDE/**/*.m"
            ]
          )
        )
      )
    }
  ),
  non_arc_srcs = select(
    {
      "//conditions:default": glob(
        glob(
          [
            "**/*.m"
          ],
          exclude = [
            "CORE_EXCLUDE/**/*.m",
            "CORE_EXCLUDE_IOS/**/*.m"
          ]
        ),
        exclude = glob(
          [
            "POD_REQUIRES_ARC/*.m"
          ],
          exclude = glob(
            [
              "POD_REQUIRES_ARC/*.m"
            ],
            exclude = glob(
              [
                "**/*.m"
              ],
              exclude = [
                "CORE_EXCLUDE/**/*.m",
                "CORE_EXCLUDE_IOS/**/*.m"
              ]
            )
          )
        )
      ),
      ":osxCase": glob(
        glob(
          [
            "**/*.m"
          ],
          exclude = [
            "CORE_EXCLUDE/**/*.m"
          ]
        ),
        exclude = glob(
          [
            "POD_REQUIRES_ARC/*.m"
          ],
          exclude = glob(
            [
              "POD_REQUIRES_ARC/*.m"
            ],
            exclude = glob(
              [
                "**/*.m"
              ],
              exclude = [
                "CORE_EXCLUDE/**/*.m"
              ]
            )
          )
        )
      ),
      ":tvosCase": glob(
        glob(
          [
            "**/*.m"
          ],
          exclude = [
            "CORE_EXCLUDE/**/*.m",
            "CORE_EXCLUDE_TV/**/*.m"
          ]
        ),
        exclude = glob(
          [
            "POD_REQUIRES_ARC/*.m"
          ],
          exclude = glob(
            [
              "POD_REQUIRES_ARC/*.m"
            ],
            exclude = glob(
              [
                "**/*.m"
              ],
              exclude = [
                "CORE_EXCLUDE/**/*.m",
                "CORE_EXCLUDE_TV/**/*.m"
              ]
            )
          )
        )
      ),
      ":watchosCase": glob(
        glob(
          [
            "**/*.m"
          ],
          exclude = [
            "CORE_EXCLUDE/**/*.m"
          ]
        ),
        exclude = glob(
          [
            "POD_REQUIRES_ARC/*.m"
          ],
          exclude = glob(
            [
              "POD_REQUIRES_ARC/*.m"
            ],
            exclude = glob(
              [
                "**/*.m"
              ],
              exclude = [
                "CORE_EXCLUDE/**/*.m"
              ]
            )
          )
        )
      )
    }
  ),
  hdrs = [
    ":Core_hdrs"
  ],
  pch = "pod_support/Headers/Private/TestArcPatternsWithExcludes-prefix.pch",
  deps = [
    ":Core_includes"
  ],
  copts = [
    "-fobjc-weak"
  ] + select(
    {
      "//conditions:default": [
        "-DDEBUG=1",
        "-DPOD_CONFIGURATION_DEBUG=1"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1"
      ]
    }
  ) + [
    "-IVendor/TestArcPatternsWithExcludes/pod_support/Headers/Public/FBSDKCoreKit/"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "Core_acknowledgement",
  deps = [],
  value = "//Vendor/TestArcPatternsWithExcludes/pod_support_buildable:acknowledgement_fragment"
)
