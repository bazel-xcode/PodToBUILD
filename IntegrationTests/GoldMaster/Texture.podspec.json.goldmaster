load(
  "//Vendor/rules_pods/BazelExtensions:extensions.bzl",
  "pch_with_name_hint",
  "acknowledged_target",
  "gen_module_map",
  "gen_includes",
  "headermap"
)
# Add a config setting release for compilation mode
# Assume that people are using `opt` for release mode
# see the bazel user manual for more information
# https://docs.bazel.build/versions/master/be/general.html#config_setting
config_setting(
  name = "release",
  values = {
    "compilation_mode": "opt"
  }
)
config_setting(
  name = "osxCase",
  values = {
    "apple_platform_type": "macos"
  }
)
config_setting(
  name = "tvosCase",
  values = {
    "apple_platform_type": "tvos"
  }
)
config_setting(
  name = "watchosCase",
  values = {
    "apple_platform_type": "watchos"
  }
)
filegroup(
  name = "Texture_hdrs",
  srcs = glob(
    [
      "pod_support/Headers/Public/**/*"
    ],
    exclude_directories = 1
  ) + glob(
    [
      "AsyncDisplayKit/**/*.h",
      "AsyncDisplayKit/**/*.hpp",
      "AsyncDisplayKit/**/*.hxx"
    ],
    exclude_directories = 1
  ) + [
    ":PINRemoteImage_hdrs",
    ":MapKit_hdrs",
    ":Photos_hdrs",
    ":AssetsLibrary_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "Texture_hmap",
  namespace = "AsyncDisplayKit",
  hdrs = [
    ":Texture_hdrs"
  ],
  deps = [
    ":AssetsLibrary",
    ":MapKit",
    ":PINRemoteImage",
    ":Photos"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "Texture_includes",
  include = [
    "Vendor/Texture/pod_support/Headers/Public/"
  ]
)
gen_module_map(
  "AsyncDisplayKit",
  "Texture_module_map",
  "AsyncDisplayKit",
  [
    "Texture_hdrs"
  ]
)
objc_library(
  name = "Texture",
  enable_modules = 0,
  hdrs = [
    ":Texture_hdrs"
  ],
  pch = pch_with_name_hint(
    "Texture",
    []
  ),
  sdk_dylibs = [
    "c++"
  ],
  deps = [
    ":AssetsLibrary",
    ":MapKit",
    ":PINRemoteImage",
    ":Photos",
    ":Texture_includes"
  ],
  copts = select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/Texture/pod_support/Headers/Public/AsyncDisplayKit/"
  ] + [
    "-fmodule-name=AsyncDisplayKit_pod_module"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "Texture_acknowledgement",
  deps = [],
  value = "//Vendor/Texture/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "Core_cxx_hdrs",
  srcs = glob(
    [
      "AsyncDisplayKit/**/*.h",
      "AsyncDisplayKit/**/*.hpp",
      "AsyncDisplayKit/**/*.hxx",
      "Base/*.h",
      "Source/**/*.h",
      "Source/TextKit/*.h"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Core_cxx_union_hdrs",
  srcs = [
    "Core_cxx_hdrs",
    "Texture_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "Core_cxx_hmap",
  namespace = "AsyncDisplayKit",
  hdrs = [
    ":Core_cxx_union_hdrs"
  ],
  deps = [],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "Core_cxx_includes",
  include = [
    "Vendor/Texture/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "Core_cxx",
  enable_modules = 0,
  srcs = glob(
    [
      "Source/**/*.mm"
    ],
    exclude = glob(
      [
        "Base/*.m",
        "Source/**/*.m"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  hdrs = [
    ":Core_cxx_union_hdrs"
  ],
  pch = pch_with_name_hint(
    "Texture",
    glob(
      [
        "Source/**/*.pch"
      ],
      exclude_directories = 1
    )
  ),
  sdk_dylibs = [
    "c++"
  ],
  deps = [
    ":Core_cxx_includes"
  ],
  copts = [
    "-std=c++11",
    "-stdlib=libc++",
    "-fno-exceptions -fno-objc-arc-exceptions"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/Texture/pod_support/Headers/Public/AsyncDisplayKit/"
  ] + [
    "-fmodule-name=AsyncDisplayKit_pod_module"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "Core_cxx_acknowledgement",
  deps = [],
  value = "//Vendor/Texture/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "Core_hdrs",
  srcs = glob(
    [
      "AsyncDisplayKit/**/*.h",
      "AsyncDisplayKit/**/*.hpp",
      "AsyncDisplayKit/**/*.hxx",
      "Base/*.h",
      "Source/**/*.h",
      "Source/TextKit/*.h"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Core_union_hdrs",
  srcs = [
    "Core_hdrs",
    "Texture_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "Core_hmap",
  namespace = "AsyncDisplayKit",
  hdrs = [
    ":Core_union_hdrs"
  ],
  deps = [
    ":Core_cxx"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "Core_includes",
  include = [
    "Vendor/Texture/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "Core",
  enable_modules = 0,
  srcs = glob(
    [
      "Base/*.m",
      "Source/**/*.m"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":Core_union_hdrs"
  ],
  pch = pch_with_name_hint(
    "Texture",
    glob(
      [
        "Base/**/*.pch",
        "Source/**/*.pch"
      ],
      exclude_directories = 1
    )
  ),
  sdk_dylibs = [
    "c++"
  ],
  deps = [
    ":Core_cxx",
    ":Core_includes"
  ],
  copts = [
    "-fno-exceptions -fno-objc-arc-exceptions"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/Texture/pod_support/Headers/Public/AsyncDisplayKit/"
  ] + [
    "-fmodule-name=AsyncDisplayKit_pod_module"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "Core_acknowledgement",
  deps = [],
  value = "//Vendor/Texture/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "PINRemoteImage_hdrs",
  srcs = glob(
    [
      "AsyncDisplayKit/**/*.h",
      "AsyncDisplayKit/**/*.hpp",
      "AsyncDisplayKit/**/*.hxx"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "PINRemoteImage_union_hdrs",
  srcs = [
    "PINRemoteImage_hdrs",
    "Texture_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "PINRemoteImage_hmap",
  namespace = "AsyncDisplayKit",
  hdrs = [
    ":PINRemoteImage_union_hdrs"
  ],
  deps = [
    "//Vendor/PINRemoteImage:PINCache",
    "//Vendor/PINRemoteImage:iOS",
    ":Core"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "PINRemoteImage_includes",
  include = [
    "Vendor/Texture/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "PINRemoteImage",
  enable_modules = 0,
  hdrs = [
    ":PINRemoteImage_union_hdrs"
  ],
  pch = pch_with_name_hint(
    "Texture",
    []
  ),
  sdk_dylibs = [
    "c++"
  ],
  deps = [
    "//Vendor/PINRemoteImage:PINCache",
    "//Vendor/PINRemoteImage:iOS",
    ":Core",
    ":PINRemoteImage_includes"
  ],
  copts = select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/Texture/pod_support/Headers/Public/AsyncDisplayKit/"
  ] + [
    "-fmodule-name=AsyncDisplayKit_pod_module"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "PINRemoteImage_acknowledgement",
  deps = [
    "//Vendor/PINRemoteImage:PINCache_acknowledgement",
    "//Vendor/PINRemoteImage:iOS_acknowledgement"
  ],
  value = "//Vendor/Texture/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "IGListKit_hdrs",
  srcs = glob(
    [
      "AsyncDisplayKit/**/*.h",
      "AsyncDisplayKit/**/*.hpp",
      "AsyncDisplayKit/**/*.hxx"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "IGListKit_union_hdrs",
  srcs = [
    "IGListKit_hdrs",
    "Texture_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "IGListKit_hmap",
  namespace = "AsyncDisplayKit",
  hdrs = [
    ":IGListKit_union_hdrs"
  ],
  deps = [
    "//Vendor/IGListKit:IGListKit",
    ":Core"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "IGListKit_includes",
  include = [
    "Vendor/Texture/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "IGListKit",
  enable_modules = 0,
  hdrs = [
    ":IGListKit_union_hdrs"
  ],
  pch = pch_with_name_hint(
    "Texture",
    []
  ),
  sdk_dylibs = [
    "c++"
  ],
  deps = [
    "//Vendor/IGListKit:IGListKit",
    ":Core",
    ":IGListKit_includes"
  ],
  copts = select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/Texture/pod_support/Headers/Public/AsyncDisplayKit/"
  ] + [
    "-fmodule-name=AsyncDisplayKit_pod_module"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "IGListKit_acknowledgement",
  deps = [
    "//Vendor/IGListKit:IGListKit_acknowledgement"
  ],
  value = "//Vendor/Texture/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "Yoga_hdrs",
  srcs = glob(
    [
      "AsyncDisplayKit/**/*.h",
      "AsyncDisplayKit/**/*.hpp",
      "AsyncDisplayKit/**/*.hxx"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Yoga_union_hdrs",
  srcs = [
    "Yoga_hdrs",
    "Texture_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "Yoga_hmap",
  namespace = "AsyncDisplayKit",
  hdrs = [
    ":Yoga_union_hdrs"
  ],
  deps = [
    "//Vendor/Yoga:Yoga",
    ":Core"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "Yoga_includes",
  include = [
    "Vendor/Texture/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "Yoga",
  enable_modules = 0,
  hdrs = [
    ":Yoga_union_hdrs"
  ],
  pch = pch_with_name_hint(
    "Texture",
    []
  ),
  sdk_dylibs = [
    "c++"
  ],
  deps = [
    "//Vendor/Yoga:Yoga",
    ":Core",
    ":Yoga_includes"
  ],
  copts = [
    "-DYOGA=1"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/Texture/pod_support/Headers/Public/AsyncDisplayKit/"
  ] + [
    "-fmodule-name=AsyncDisplayKit_pod_module"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "Yoga_acknowledgement",
  deps = [
    "//Vendor/Yoga:Yoga_acknowledgement"
  ],
  value = "//Vendor/Texture/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "MapKit_hdrs",
  srcs = glob(
    [
      "AsyncDisplayKit/**/*.h",
      "AsyncDisplayKit/**/*.hpp",
      "AsyncDisplayKit/**/*.hxx"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "MapKit_union_hdrs",
  srcs = [
    "MapKit_hdrs",
    "Texture_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "MapKit_hmap",
  namespace = "AsyncDisplayKit",
  hdrs = [
    ":MapKit_union_hdrs"
  ],
  deps = [
    ":Core"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "MapKit_includes",
  include = [
    "Vendor/Texture/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "MapKit",
  enable_modules = 0,
  hdrs = [
    ":MapKit_union_hdrs"
  ],
  pch = pch_with_name_hint(
    "Texture",
    []
  ),
  sdk_frameworks = [
    "MapKit"
  ],
  sdk_dylibs = [
    "c++"
  ],
  deps = [
    ":Core",
    ":MapKit_includes"
  ],
  copts = [
    "-DAS_USE_MAPKIT=1"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/Texture/pod_support/Headers/Public/AsyncDisplayKit/"
  ] + [
    "-fmodule-name=AsyncDisplayKit_pod_module"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "MapKit_acknowledgement",
  deps = [],
  value = "//Vendor/Texture/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "Photos_hdrs",
  srcs = glob(
    [
      "AsyncDisplayKit/**/*.h",
      "AsyncDisplayKit/**/*.hpp",
      "AsyncDisplayKit/**/*.hxx"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Photos_union_hdrs",
  srcs = [
    "Photos_hdrs",
    "Texture_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "Photos_hmap",
  namespace = "AsyncDisplayKit",
  hdrs = [
    ":Photos_union_hdrs"
  ],
  deps = [
    ":Core"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "Photos_includes",
  include = [
    "Vendor/Texture/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "Photos",
  enable_modules = 0,
  hdrs = [
    ":Photos_union_hdrs"
  ],
  pch = pch_with_name_hint(
    "Texture",
    []
  ),
  sdk_frameworks = [
    "Photos"
  ],
  sdk_dylibs = [
    "c++"
  ],
  deps = [
    ":Core",
    ":Photos_includes"
  ],
  copts = [
    "-DAS_USE_PHOTOS=1"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/Texture/pod_support/Headers/Public/AsyncDisplayKit/"
  ] + [
    "-fmodule-name=AsyncDisplayKit_pod_module"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "Photos_acknowledgement",
  deps = [],
  value = "//Vendor/Texture/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "AssetsLibrary_hdrs",
  srcs = glob(
    [
      "AsyncDisplayKit/**/*.h",
      "AsyncDisplayKit/**/*.hpp",
      "AsyncDisplayKit/**/*.hxx"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "AssetsLibrary_union_hdrs",
  srcs = [
    "AssetsLibrary_hdrs",
    "Texture_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "AssetsLibrary_hmap",
  namespace = "AsyncDisplayKit",
  hdrs = [
    ":AssetsLibrary_union_hdrs"
  ],
  deps = [
    ":Core"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "AssetsLibrary_includes",
  include = [
    "Vendor/Texture/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "AssetsLibrary",
  enable_modules = 0,
  hdrs = [
    ":AssetsLibrary_union_hdrs"
  ],
  pch = pch_with_name_hint(
    "Texture",
    []
  ),
  sdk_frameworks = [
    "AssetsLibrary"
  ],
  sdk_dylibs = [
    "c++"
  ],
  deps = [
    ":Core",
    ":AssetsLibrary_includes"
  ],
  copts = [
    "-DAS_USE_ASSETS_LIBRARY=1"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/Texture/pod_support/Headers/Public/AsyncDisplayKit/"
  ] + [
    "-fmodule-name=AsyncDisplayKit_pod_module"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "AssetsLibrary_acknowledgement",
  deps = [],
  value = "//Vendor/Texture/pod_support_buildable:acknowledgement_fragment"
)
