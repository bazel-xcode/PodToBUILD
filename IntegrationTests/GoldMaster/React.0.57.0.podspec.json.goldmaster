load(
  "//Vendor/rules_pods/BazelExtensions:extensions.bzl",
  "acknowledged_target",
  "gen_module_map",
  "gen_includes",
  "headermap"
)
# Add a config setting release for compilation mode
# Assume that people are using `opt` for release mode
# see the bazel user manual for more information
# https://docs.bazel.build/versions/master/be/general.html#config_setting
config_setting(
  name = "release",
  values = {
    "compilation_mode": "opt"
  }
)
config_setting(
  name = "osxCase",
  values = {
    "apple_platform_type": "macos"
  }
)
config_setting(
  name = "tvosCase",
  values = {
    "apple_platform_type": "tvos"
  }
)
config_setting(
  name = "watchosCase",
  values = {
    "apple_platform_type": "watchos"
  }
)
filegroup(
  name = "React_package_hdrs",
  srcs = [
    "React_direct_hdrs",
    "Core_cxx_direct_hdrs",
    "Core_direct_hdrs",
    "CxxBridge_cxx_direct_hdrs",
    "CxxBridge_direct_hdrs",
    "DevSupport_cxx_direct_hdrs",
    "DevSupport_direct_hdrs",
    "RCTFabric_cxx_direct_hdrs",
    "RCTFabric_direct_hdrs",
    "tvOS_direct_hdrs",
    "jschelpers_direct_hdrs",
    "jsinspector_direct_hdrs",
    "PrivateDatabase_direct_hdrs",
    "cxxreact_direct_hdrs",
    "fabric_direct_hdrs",
    "fabric_activityindicator_direct_hdrs",
    "fabric_attributedstring_direct_hdrs",
    "fabric_core_direct_hdrs",
    "fabric_debug_direct_hdrs",
    "fabric_graphics_direct_hdrs",
    "fabric_scrollview_direct_hdrs",
    "fabric_text_direct_hdrs",
    "fabric_textlayoutmanager_direct_hdrs",
    "fabric_uimanager_direct_hdrs",
    "fabric_view_direct_hdrs",
    "RCTFabricSample_direct_hdrs",
    "ART_direct_hdrs",
    "RCTActionSheet_direct_hdrs",
    "RCTAnimation_direct_hdrs",
    "RCTBlob_cxx_direct_hdrs",
    "RCTBlob_direct_hdrs",
    "RCTCameraRoll_direct_hdrs",
    "RCTGeolocation_direct_hdrs",
    "RCTImage_direct_hdrs",
    "RCTNetwork_cxx_direct_hdrs",
    "RCTNetwork_direct_hdrs",
    "RCTPushNotification_direct_hdrs",
    "RCTSettings_direct_hdrs",
    "RCTText_direct_hdrs",
    "RCTVibration_direct_hdrs",
    "RCTWebSocket_direct_hdrs",
    "fishhook_direct_hdrs",
    "RCTLinkingIOS_direct_hdrs",
    "RCTTest_direct_hdrs",
    "_ignore_me_subspec_for_linting__direct_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "React_direct_hdrs",
  srcs = glob(
    [
      "pod_support/Headers/Public/**/*"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "React_public_hdrs",
  srcs = [
    ":Core_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "React_hdrs",
  srcs = glob(
    [
      "pod_support/Headers/Public/**/*"
    ],
    exclude_directories = 1
  ) + [
    ":Core_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "React_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":React_hdrs"
  ],
  deps = [
    ":Core_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "React_includes",
  include = [
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "React",
  enable_modules = 0,
  hdrs = [
    ":React_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    ":Core",
    ":React_includes"
  ],
  copts = select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "React_acknowledgement",
  deps = [],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "Core_cxx_direct_hdrs",
  srcs = select(
    {
      "//conditions:default": glob(
        glob(
          [
            "pod_support/Headers/Public/**/*"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/**/*.h"
          ],
          exclude = [
            "**/__tests__/*.h",
            "**/__tests__/*.hpp",
            "**/__tests__/*.hxx",
            "IntegrationTests/*.h",
            "IntegrationTests/*.hpp",
            "IntegrationTests/*.hxx",
            "React/**/RCTTV*.h",
            "React/**/RCTTV*.hpp",
            "React/**/RCTTV*.hxx",
            "React/Cxx*/*.h",
            "React/Cxx*/*.hpp",
            "React/Cxx*/*.hxx",
            "React/DevSupport/*.h",
            "React/DevSupport/*.hpp",
            "React/DevSupport/*.hxx",
            "React/Fabric/**/*.h",
            "React/Fabric/**/*.hpp",
            "React/Fabric/**/*.hxx",
            "React/Inspector/*.h",
            "React/Inspector/*.hpp",
            "React/Inspector/*.hxx",
            "ReactCommon/yoga/*.h",
            "ReactCommon/yoga/*.hpp",
            "ReactCommon/yoga/*.hxx"
          ],
          exclude_directories = 1
        ),
        exclude_directories = 1
      ),
      ":osxCase": glob(
        glob(
          [
            "pod_support/Headers/Public/**/*"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/**/*.h"
          ],
          exclude = [
            "**/__tests__/*.h",
            "**/__tests__/*.hpp",
            "**/__tests__/*.hxx",
            "IntegrationTests/*.h",
            "IntegrationTests/*.hpp",
            "IntegrationTests/*.hxx",
            "React/Cxx*/*.h",
            "React/Cxx*/*.hpp",
            "React/Cxx*/*.hxx",
            "React/DevSupport/*.h",
            "React/DevSupport/*.hpp",
            "React/DevSupport/*.hxx",
            "React/Fabric/**/*.h",
            "React/Fabric/**/*.hpp",
            "React/Fabric/**/*.hxx",
            "React/Inspector/*.h",
            "React/Inspector/*.hpp",
            "React/Inspector/*.hxx",
            "ReactCommon/yoga/*.h",
            "ReactCommon/yoga/*.hpp",
            "ReactCommon/yoga/*.hxx"
          ],
          exclude_directories = 1
        ),
        exclude_directories = 1
      ),
      ":tvosCase": glob(
        glob(
          [
            "pod_support/Headers/Public/**/*"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/**/*.h"
          ],
          exclude = [
            "**/__tests__/*.h",
            "**/__tests__/*.hpp",
            "**/__tests__/*.hxx",
            "IntegrationTests/*.h",
            "IntegrationTests/*.hpp",
            "IntegrationTests/*.hxx",
            "React/Cxx*/*.h",
            "React/Cxx*/*.hpp",
            "React/Cxx*/*.hxx",
            "React/DevSupport/*.h",
            "React/DevSupport/*.hpp",
            "React/DevSupport/*.hxx",
            "React/Fabric/**/*.h",
            "React/Fabric/**/*.hpp",
            "React/Fabric/**/*.hxx",
            "React/Inspector/*.h",
            "React/Inspector/*.hpp",
            "React/Inspector/*.hxx",
            "React/Modules/RCTClipboard*.h",
            "React/Modules/RCTClipboard*.hpp",
            "React/Modules/RCTClipboard*.hxx",
            "React/Views/RCTDatePicker*.h",
            "React/Views/RCTDatePicker*.hpp",
            "React/Views/RCTDatePicker*.hxx",
            "React/Views/RCTPicker*.h",
            "React/Views/RCTPicker*.hpp",
            "React/Views/RCTPicker*.hxx",
            "React/Views/RCTRefreshControl*.h",
            "React/Views/RCTRefreshControl*.hpp",
            "React/Views/RCTRefreshControl*.hxx",
            "React/Views/RCTSlider*.h",
            "React/Views/RCTSlider*.hpp",
            "React/Views/RCTSlider*.hxx",
            "React/Views/RCTSwitch*.h",
            "React/Views/RCTSwitch*.hpp",
            "React/Views/RCTSwitch*.hxx",
            "React/Views/RCTWebView*.h",
            "React/Views/RCTWebView*.hpp",
            "React/Views/RCTWebView*.hxx",
            "ReactCommon/yoga/*.h",
            "ReactCommon/yoga/*.hpp",
            "ReactCommon/yoga/*.hxx"
          ],
          exclude_directories = 1
        ),
        exclude_directories = 1
      ),
      ":watchosCase": glob(
        glob(
          [
            "pod_support/Headers/Public/**/*"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/**/*.h"
          ],
          exclude = [
            "**/__tests__/*.h",
            "**/__tests__/*.hpp",
            "**/__tests__/*.hxx",
            "IntegrationTests/*.h",
            "IntegrationTests/*.hpp",
            "IntegrationTests/*.hxx",
            "React/Cxx*/*.h",
            "React/Cxx*/*.hpp",
            "React/Cxx*/*.hxx",
            "React/DevSupport/*.h",
            "React/DevSupport/*.hpp",
            "React/DevSupport/*.hxx",
            "React/Fabric/**/*.h",
            "React/Fabric/**/*.hpp",
            "React/Fabric/**/*.hxx",
            "React/Inspector/*.h",
            "React/Inspector/*.hpp",
            "React/Inspector/*.hxx",
            "ReactCommon/yoga/*.h",
            "ReactCommon/yoga/*.hpp",
            "ReactCommon/yoga/*.hxx"
          ],
          exclude_directories = 1
        ),
        exclude_directories = 1
      )
    }
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Core_cxx_public_hdrs",
  srcs = glob(
    [
      "React/**/*.h"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Core_cxx_hdrs",
  srcs = select(
    {
      "//conditions:default": glob(
        glob(
          [
            "pod_support/Headers/Public/**/*"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/**/*.h"
          ],
          exclude = [
            "**/__tests__/*.h",
            "**/__tests__/*.hpp",
            "**/__tests__/*.hxx",
            "IntegrationTests/*.h",
            "IntegrationTests/*.hpp",
            "IntegrationTests/*.hxx",
            "React/**/RCTTV*.h",
            "React/**/RCTTV*.hpp",
            "React/**/RCTTV*.hxx",
            "React/Cxx*/*.h",
            "React/Cxx*/*.hpp",
            "React/Cxx*/*.hxx",
            "React/DevSupport/*.h",
            "React/DevSupport/*.hpp",
            "React/DevSupport/*.hxx",
            "React/Fabric/**/*.h",
            "React/Fabric/**/*.hpp",
            "React/Fabric/**/*.hxx",
            "React/Inspector/*.h",
            "React/Inspector/*.hpp",
            "React/Inspector/*.hxx",
            "ReactCommon/yoga/*.h",
            "ReactCommon/yoga/*.hpp",
            "ReactCommon/yoga/*.hxx"
          ],
          exclude_directories = 1
        ),
        exclude_directories = 1
      ),
      ":osxCase": glob(
        glob(
          [
            "pod_support/Headers/Public/**/*"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/**/*.h"
          ],
          exclude = [
            "**/__tests__/*.h",
            "**/__tests__/*.hpp",
            "**/__tests__/*.hxx",
            "IntegrationTests/*.h",
            "IntegrationTests/*.hpp",
            "IntegrationTests/*.hxx",
            "React/Cxx*/*.h",
            "React/Cxx*/*.hpp",
            "React/Cxx*/*.hxx",
            "React/DevSupport/*.h",
            "React/DevSupport/*.hpp",
            "React/DevSupport/*.hxx",
            "React/Fabric/**/*.h",
            "React/Fabric/**/*.hpp",
            "React/Fabric/**/*.hxx",
            "React/Inspector/*.h",
            "React/Inspector/*.hpp",
            "React/Inspector/*.hxx",
            "ReactCommon/yoga/*.h",
            "ReactCommon/yoga/*.hpp",
            "ReactCommon/yoga/*.hxx"
          ],
          exclude_directories = 1
        ),
        exclude_directories = 1
      ),
      ":tvosCase": glob(
        glob(
          [
            "pod_support/Headers/Public/**/*"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/**/*.h"
          ],
          exclude = [
            "**/__tests__/*.h",
            "**/__tests__/*.hpp",
            "**/__tests__/*.hxx",
            "IntegrationTests/*.h",
            "IntegrationTests/*.hpp",
            "IntegrationTests/*.hxx",
            "React/Cxx*/*.h",
            "React/Cxx*/*.hpp",
            "React/Cxx*/*.hxx",
            "React/DevSupport/*.h",
            "React/DevSupport/*.hpp",
            "React/DevSupport/*.hxx",
            "React/Fabric/**/*.h",
            "React/Fabric/**/*.hpp",
            "React/Fabric/**/*.hxx",
            "React/Inspector/*.h",
            "React/Inspector/*.hpp",
            "React/Inspector/*.hxx",
            "React/Modules/RCTClipboard*.h",
            "React/Modules/RCTClipboard*.hpp",
            "React/Modules/RCTClipboard*.hxx",
            "React/Views/RCTDatePicker*.h",
            "React/Views/RCTDatePicker*.hpp",
            "React/Views/RCTDatePicker*.hxx",
            "React/Views/RCTPicker*.h",
            "React/Views/RCTPicker*.hpp",
            "React/Views/RCTPicker*.hxx",
            "React/Views/RCTRefreshControl*.h",
            "React/Views/RCTRefreshControl*.hpp",
            "React/Views/RCTRefreshControl*.hxx",
            "React/Views/RCTSlider*.h",
            "React/Views/RCTSlider*.hpp",
            "React/Views/RCTSlider*.hxx",
            "React/Views/RCTSwitch*.h",
            "React/Views/RCTSwitch*.hpp",
            "React/Views/RCTSwitch*.hxx",
            "React/Views/RCTWebView*.h",
            "React/Views/RCTWebView*.hpp",
            "React/Views/RCTWebView*.hxx",
            "ReactCommon/yoga/*.h",
            "ReactCommon/yoga/*.hpp",
            "ReactCommon/yoga/*.hxx"
          ],
          exclude_directories = 1
        ),
        exclude_directories = 1
      ),
      ":watchosCase": glob(
        glob(
          [
            "pod_support/Headers/Public/**/*"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/**/*.h"
          ],
          exclude = [
            "**/__tests__/*.h",
            "**/__tests__/*.hpp",
            "**/__tests__/*.hxx",
            "IntegrationTests/*.h",
            "IntegrationTests/*.hpp",
            "IntegrationTests/*.hxx",
            "React/Cxx*/*.h",
            "React/Cxx*/*.hpp",
            "React/Cxx*/*.hxx",
            "React/DevSupport/*.h",
            "React/DevSupport/*.hpp",
            "React/DevSupport/*.hxx",
            "React/Fabric/**/*.h",
            "React/Fabric/**/*.hpp",
            "React/Fabric/**/*.hxx",
            "React/Inspector/*.h",
            "React/Inspector/*.hpp",
            "React/Inspector/*.hxx",
            "ReactCommon/yoga/*.h",
            "ReactCommon/yoga/*.hpp",
            "ReactCommon/yoga/*.hxx"
          ],
          exclude_directories = 1
        ),
        exclude_directories = 1
      )
    }
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Core_cxx_union_hdrs",
  srcs = [
    "Core_cxx_hdrs",
    "React_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "Core_cxx_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":Core_cxx_union_hdrs"
  ],
  deps = [
    "//Vendor/Yoga:Yoga"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "Core_cxx_includes",
  include = [
    "Vendor/React/ReactCommon",
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "Core_cxx",
  enable_modules = 0,
  srcs = select(
    {
      "//conditions:default": glob(
        [
          "React/**/*.cpp",
          "React/**/*.mm"
        ],
        exclude = [
          "**/__tests__/*.S",
          "**/__tests__/*.c",
          "**/__tests__/*.cc",
          "**/__tests__/*.cpp",
          "**/__tests__/*.cxx",
          "**/__tests__/*.m",
          "**/__tests__/*.mm",
          "**/__tests__/*.s",
          "IntegrationTests/*.S",
          "IntegrationTests/*.c",
          "IntegrationTests/*.cc",
          "IntegrationTests/*.cpp",
          "IntegrationTests/*.cxx",
          "IntegrationTests/*.m",
          "IntegrationTests/*.mm",
          "IntegrationTests/*.s",
          "React/**/RCTTV*.S",
          "React/**/RCTTV*.c",
          "React/**/RCTTV*.cc",
          "React/**/RCTTV*.cpp",
          "React/**/RCTTV*.cxx",
          "React/**/RCTTV*.m",
          "React/**/RCTTV*.mm",
          "React/**/RCTTV*.s",
          "React/Cxx*/*.S",
          "React/Cxx*/*.c",
          "React/Cxx*/*.cc",
          "React/Cxx*/*.cpp",
          "React/Cxx*/*.cxx",
          "React/Cxx*/*.m",
          "React/Cxx*/*.mm",
          "React/Cxx*/*.s",
          "React/DevSupport/*.S",
          "React/DevSupport/*.c",
          "React/DevSupport/*.cc",
          "React/DevSupport/*.cpp",
          "React/DevSupport/*.cxx",
          "React/DevSupport/*.m",
          "React/DevSupport/*.mm",
          "React/DevSupport/*.s",
          "React/Fabric/**/*.S",
          "React/Fabric/**/*.c",
          "React/Fabric/**/*.cc",
          "React/Fabric/**/*.cpp",
          "React/Fabric/**/*.cxx",
          "React/Fabric/**/*.m",
          "React/Fabric/**/*.mm",
          "React/Fabric/**/*.s",
          "React/Inspector/*.S",
          "React/Inspector/*.c",
          "React/Inspector/*.cc",
          "React/Inspector/*.cpp",
          "React/Inspector/*.cxx",
          "React/Inspector/*.m",
          "React/Inspector/*.mm",
          "React/Inspector/*.s",
          "ReactCommon/yoga/*.S",
          "ReactCommon/yoga/*.c",
          "ReactCommon/yoga/*.cc",
          "ReactCommon/yoga/*.cpp",
          "ReactCommon/yoga/*.cxx",
          "ReactCommon/yoga/*.m",
          "ReactCommon/yoga/*.mm",
          "ReactCommon/yoga/*.s"
        ] + glob(
          [
            "React/**/*.S",
            "React/**/*.c",
            "React/**/*.m"
          ],
          exclude = [
            "**/__tests__/*.S",
            "**/__tests__/*.c",
            "**/__tests__/*.cc",
            "**/__tests__/*.cpp",
            "**/__tests__/*.cxx",
            "**/__tests__/*.m",
            "**/__tests__/*.mm",
            "**/__tests__/*.s",
            "IntegrationTests/*.S",
            "IntegrationTests/*.c",
            "IntegrationTests/*.cc",
            "IntegrationTests/*.cpp",
            "IntegrationTests/*.cxx",
            "IntegrationTests/*.m",
            "IntegrationTests/*.mm",
            "IntegrationTests/*.s",
            "React/**/RCTTV*.S",
            "React/**/RCTTV*.c",
            "React/**/RCTTV*.cc",
            "React/**/RCTTV*.cpp",
            "React/**/RCTTV*.cxx",
            "React/**/RCTTV*.m",
            "React/**/RCTTV*.mm",
            "React/**/RCTTV*.s",
            "React/Cxx*/*.S",
            "React/Cxx*/*.c",
            "React/Cxx*/*.cc",
            "React/Cxx*/*.cpp",
            "React/Cxx*/*.cxx",
            "React/Cxx*/*.m",
            "React/Cxx*/*.mm",
            "React/Cxx*/*.s",
            "React/DevSupport/*.S",
            "React/DevSupport/*.c",
            "React/DevSupport/*.cc",
            "React/DevSupport/*.cpp",
            "React/DevSupport/*.cxx",
            "React/DevSupport/*.m",
            "React/DevSupport/*.mm",
            "React/DevSupport/*.s",
            "React/Fabric/**/*.S",
            "React/Fabric/**/*.c",
            "React/Fabric/**/*.cc",
            "React/Fabric/**/*.cpp",
            "React/Fabric/**/*.cxx",
            "React/Fabric/**/*.m",
            "React/Fabric/**/*.mm",
            "React/Fabric/**/*.s",
            "React/Inspector/*.S",
            "React/Inspector/*.c",
            "React/Inspector/*.cc",
            "React/Inspector/*.cpp",
            "React/Inspector/*.cxx",
            "React/Inspector/*.m",
            "React/Inspector/*.mm",
            "React/Inspector/*.s",
            "ReactCommon/yoga/*.S",
            "ReactCommon/yoga/*.c",
            "ReactCommon/yoga/*.cc",
            "ReactCommon/yoga/*.cpp",
            "ReactCommon/yoga/*.cxx",
            "ReactCommon/yoga/*.m",
            "ReactCommon/yoga/*.mm",
            "ReactCommon/yoga/*.s"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/Cxx*/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/Cxx*/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/DevSupport/*.cc",
            "React/DevSupport/*.cpp",
            "React/DevSupport/*.cxx",
            "React/DevSupport/*.mm",
            "React/Inspector/*.cc",
            "React/Inspector/*.cpp",
            "React/Inspector/*.cxx",
            "React/Inspector/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/DevSupport/*.S",
            "React/DevSupport/*.c",
            "React/DevSupport/*.m",
            "React/DevSupport/*.s",
            "React/Inspector/*.S",
            "React/Inspector/*.c",
            "React/Inspector/*.m",
            "React/Inspector/*.s"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/Fabric/**/*.cpp",
            "React/Fabric/**/*.mm"
          ],
          exclude = [
            "**/tests/*.S",
            "**/tests/*.c",
            "**/tests/*.cc",
            "**/tests/*.cpp",
            "**/tests/*.cxx",
            "**/tests/*.m",
            "**/tests/*.mm",
            "**/tests/*.s"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/Fabric/**/*.S",
            "React/Fabric/**/*.c",
            "React/Fabric/**/*.m"
          ],
          exclude = [
            "**/tests/*.S",
            "**/tests/*.c",
            "**/tests/*.cc",
            "**/tests/*.cpp",
            "**/tests/*.cxx",
            "**/tests/*.m",
            "**/tests/*.mm",
            "**/tests/*.s"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/**/RCTTV*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/ART/**/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/ActionSheetIOS/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/NativeAnimation/*.m",
            "Libraries/NativeAnimation/Drivers/*.m",
            "Libraries/NativeAnimation/Nodes/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Blob/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Blob/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/CameraRoll/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Geolocation/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Image/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Network/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Network/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/PushNotificationIOS/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Settings/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Text/**/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Vibration/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/WebSocket/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/LinkingIOS/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/RCTTest/**/*.m"
          ],
          exclude_directories = 1
        ),
        exclude_directories = 1
      ),
      ":osxCase": glob(
        [
          "React/**/*.cpp",
          "React/**/*.mm"
        ],
        exclude = [
          "**/__tests__/*.S",
          "**/__tests__/*.c",
          "**/__tests__/*.cc",
          "**/__tests__/*.cpp",
          "**/__tests__/*.cxx",
          "**/__tests__/*.m",
          "**/__tests__/*.mm",
          "**/__tests__/*.s",
          "IntegrationTests/*.S",
          "IntegrationTests/*.c",
          "IntegrationTests/*.cc",
          "IntegrationTests/*.cpp",
          "IntegrationTests/*.cxx",
          "IntegrationTests/*.m",
          "IntegrationTests/*.mm",
          "IntegrationTests/*.s",
          "React/Cxx*/*.S",
          "React/Cxx*/*.c",
          "React/Cxx*/*.cc",
          "React/Cxx*/*.cpp",
          "React/Cxx*/*.cxx",
          "React/Cxx*/*.m",
          "React/Cxx*/*.mm",
          "React/Cxx*/*.s",
          "React/DevSupport/*.S",
          "React/DevSupport/*.c",
          "React/DevSupport/*.cc",
          "React/DevSupport/*.cpp",
          "React/DevSupport/*.cxx",
          "React/DevSupport/*.m",
          "React/DevSupport/*.mm",
          "React/DevSupport/*.s",
          "React/Fabric/**/*.S",
          "React/Fabric/**/*.c",
          "React/Fabric/**/*.cc",
          "React/Fabric/**/*.cpp",
          "React/Fabric/**/*.cxx",
          "React/Fabric/**/*.m",
          "React/Fabric/**/*.mm",
          "React/Fabric/**/*.s",
          "React/Inspector/*.S",
          "React/Inspector/*.c",
          "React/Inspector/*.cc",
          "React/Inspector/*.cpp",
          "React/Inspector/*.cxx",
          "React/Inspector/*.m",
          "React/Inspector/*.mm",
          "React/Inspector/*.s",
          "ReactCommon/yoga/*.S",
          "ReactCommon/yoga/*.c",
          "ReactCommon/yoga/*.cc",
          "ReactCommon/yoga/*.cpp",
          "ReactCommon/yoga/*.cxx",
          "ReactCommon/yoga/*.m",
          "ReactCommon/yoga/*.mm",
          "ReactCommon/yoga/*.s"
        ] + glob(
          [
            "React/**/*.S",
            "React/**/*.c",
            "React/**/*.m"
          ],
          exclude = [
            "**/__tests__/*.S",
            "**/__tests__/*.c",
            "**/__tests__/*.cc",
            "**/__tests__/*.cpp",
            "**/__tests__/*.cxx",
            "**/__tests__/*.m",
            "**/__tests__/*.mm",
            "**/__tests__/*.s",
            "IntegrationTests/*.S",
            "IntegrationTests/*.c",
            "IntegrationTests/*.cc",
            "IntegrationTests/*.cpp",
            "IntegrationTests/*.cxx",
            "IntegrationTests/*.m",
            "IntegrationTests/*.mm",
            "IntegrationTests/*.s",
            "React/Cxx*/*.S",
            "React/Cxx*/*.c",
            "React/Cxx*/*.cc",
            "React/Cxx*/*.cpp",
            "React/Cxx*/*.cxx",
            "React/Cxx*/*.m",
            "React/Cxx*/*.mm",
            "React/Cxx*/*.s",
            "React/DevSupport/*.S",
            "React/DevSupport/*.c",
            "React/DevSupport/*.cc",
            "React/DevSupport/*.cpp",
            "React/DevSupport/*.cxx",
            "React/DevSupport/*.m",
            "React/DevSupport/*.mm",
            "React/DevSupport/*.s",
            "React/Fabric/**/*.S",
            "React/Fabric/**/*.c",
            "React/Fabric/**/*.cc",
            "React/Fabric/**/*.cpp",
            "React/Fabric/**/*.cxx",
            "React/Fabric/**/*.m",
            "React/Fabric/**/*.mm",
            "React/Fabric/**/*.s",
            "React/Inspector/*.S",
            "React/Inspector/*.c",
            "React/Inspector/*.cc",
            "React/Inspector/*.cpp",
            "React/Inspector/*.cxx",
            "React/Inspector/*.m",
            "React/Inspector/*.mm",
            "React/Inspector/*.s",
            "ReactCommon/yoga/*.S",
            "ReactCommon/yoga/*.c",
            "ReactCommon/yoga/*.cc",
            "ReactCommon/yoga/*.cpp",
            "ReactCommon/yoga/*.cxx",
            "ReactCommon/yoga/*.m",
            "ReactCommon/yoga/*.mm",
            "ReactCommon/yoga/*.s"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/Cxx*/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/Cxx*/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/DevSupport/*.cc",
            "React/DevSupport/*.cpp",
            "React/DevSupport/*.cxx",
            "React/DevSupport/*.mm",
            "React/Inspector/*.cc",
            "React/Inspector/*.cpp",
            "React/Inspector/*.cxx",
            "React/Inspector/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/DevSupport/*.S",
            "React/DevSupport/*.c",
            "React/DevSupport/*.m",
            "React/DevSupport/*.s",
            "React/Inspector/*.S",
            "React/Inspector/*.c",
            "React/Inspector/*.m",
            "React/Inspector/*.s"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/Fabric/**/*.cpp",
            "React/Fabric/**/*.mm"
          ],
          exclude = [
            "**/tests/*.S",
            "**/tests/*.c",
            "**/tests/*.cc",
            "**/tests/*.cpp",
            "**/tests/*.cxx",
            "**/tests/*.m",
            "**/tests/*.mm",
            "**/tests/*.s"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/Fabric/**/*.S",
            "React/Fabric/**/*.c",
            "React/Fabric/**/*.m"
          ],
          exclude = [
            "**/tests/*.S",
            "**/tests/*.c",
            "**/tests/*.cc",
            "**/tests/*.cpp",
            "**/tests/*.cxx",
            "**/tests/*.m",
            "**/tests/*.mm",
            "**/tests/*.s"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/**/RCTTV*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/ART/**/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/ActionSheetIOS/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/NativeAnimation/*.m",
            "Libraries/NativeAnimation/Drivers/*.m",
            "Libraries/NativeAnimation/Nodes/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Blob/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Blob/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/CameraRoll/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Geolocation/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Image/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Network/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Network/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/PushNotificationIOS/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Settings/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Text/**/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Vibration/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/WebSocket/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/LinkingIOS/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/RCTTest/**/*.m"
          ],
          exclude_directories = 1
        ),
        exclude_directories = 1
      ),
      ":tvosCase": glob(
        [
          "React/**/*.cpp",
          "React/**/*.mm"
        ],
        exclude = [
          "**/__tests__/*.S",
          "**/__tests__/*.c",
          "**/__tests__/*.cc",
          "**/__tests__/*.cpp",
          "**/__tests__/*.cxx",
          "**/__tests__/*.m",
          "**/__tests__/*.mm",
          "**/__tests__/*.s",
          "IntegrationTests/*.S",
          "IntegrationTests/*.c",
          "IntegrationTests/*.cc",
          "IntegrationTests/*.cpp",
          "IntegrationTests/*.cxx",
          "IntegrationTests/*.m",
          "IntegrationTests/*.mm",
          "IntegrationTests/*.s",
          "React/Cxx*/*.S",
          "React/Cxx*/*.c",
          "React/Cxx*/*.cc",
          "React/Cxx*/*.cpp",
          "React/Cxx*/*.cxx",
          "React/Cxx*/*.m",
          "React/Cxx*/*.mm",
          "React/Cxx*/*.s",
          "React/DevSupport/*.S",
          "React/DevSupport/*.c",
          "React/DevSupport/*.cc",
          "React/DevSupport/*.cpp",
          "React/DevSupport/*.cxx",
          "React/DevSupport/*.m",
          "React/DevSupport/*.mm",
          "React/DevSupport/*.s",
          "React/Fabric/**/*.S",
          "React/Fabric/**/*.c",
          "React/Fabric/**/*.cc",
          "React/Fabric/**/*.cpp",
          "React/Fabric/**/*.cxx",
          "React/Fabric/**/*.m",
          "React/Fabric/**/*.mm",
          "React/Fabric/**/*.s",
          "React/Inspector/*.S",
          "React/Inspector/*.c",
          "React/Inspector/*.cc",
          "React/Inspector/*.cpp",
          "React/Inspector/*.cxx",
          "React/Inspector/*.m",
          "React/Inspector/*.mm",
          "React/Inspector/*.s",
          "React/Modules/RCTClipboard*.S",
          "React/Modules/RCTClipboard*.c",
          "React/Modules/RCTClipboard*.cc",
          "React/Modules/RCTClipboard*.cpp",
          "React/Modules/RCTClipboard*.cxx",
          "React/Modules/RCTClipboard*.m",
          "React/Modules/RCTClipboard*.mm",
          "React/Modules/RCTClipboard*.s",
          "React/Views/RCTDatePicker*.S",
          "React/Views/RCTDatePicker*.c",
          "React/Views/RCTDatePicker*.cc",
          "React/Views/RCTDatePicker*.cpp",
          "React/Views/RCTDatePicker*.cxx",
          "React/Views/RCTDatePicker*.m",
          "React/Views/RCTDatePicker*.mm",
          "React/Views/RCTDatePicker*.s",
          "React/Views/RCTPicker*.S",
          "React/Views/RCTPicker*.c",
          "React/Views/RCTPicker*.cc",
          "React/Views/RCTPicker*.cpp",
          "React/Views/RCTPicker*.cxx",
          "React/Views/RCTPicker*.m",
          "React/Views/RCTPicker*.mm",
          "React/Views/RCTPicker*.s",
          "React/Views/RCTRefreshControl*.S",
          "React/Views/RCTRefreshControl*.c",
          "React/Views/RCTRefreshControl*.cc",
          "React/Views/RCTRefreshControl*.cpp",
          "React/Views/RCTRefreshControl*.cxx",
          "React/Views/RCTRefreshControl*.m",
          "React/Views/RCTRefreshControl*.mm",
          "React/Views/RCTRefreshControl*.s",
          "React/Views/RCTSlider*.S",
          "React/Views/RCTSlider*.c",
          "React/Views/RCTSlider*.cc",
          "React/Views/RCTSlider*.cpp",
          "React/Views/RCTSlider*.cxx",
          "React/Views/RCTSlider*.m",
          "React/Views/RCTSlider*.mm",
          "React/Views/RCTSlider*.s",
          "React/Views/RCTSwitch*.S",
          "React/Views/RCTSwitch*.c",
          "React/Views/RCTSwitch*.cc",
          "React/Views/RCTSwitch*.cpp",
          "React/Views/RCTSwitch*.cxx",
          "React/Views/RCTSwitch*.m",
          "React/Views/RCTSwitch*.mm",
          "React/Views/RCTSwitch*.s",
          "React/Views/RCTWebView*.S",
          "React/Views/RCTWebView*.c",
          "React/Views/RCTWebView*.cc",
          "React/Views/RCTWebView*.cpp",
          "React/Views/RCTWebView*.cxx",
          "React/Views/RCTWebView*.m",
          "React/Views/RCTWebView*.mm",
          "React/Views/RCTWebView*.s",
          "ReactCommon/yoga/*.S",
          "ReactCommon/yoga/*.c",
          "ReactCommon/yoga/*.cc",
          "ReactCommon/yoga/*.cpp",
          "ReactCommon/yoga/*.cxx",
          "ReactCommon/yoga/*.m",
          "ReactCommon/yoga/*.mm",
          "ReactCommon/yoga/*.s"
        ] + glob(
          [
            "React/**/*.S",
            "React/**/*.c",
            "React/**/*.m"
          ],
          exclude = [
            "**/__tests__/*.S",
            "**/__tests__/*.c",
            "**/__tests__/*.cc",
            "**/__tests__/*.cpp",
            "**/__tests__/*.cxx",
            "**/__tests__/*.m",
            "**/__tests__/*.mm",
            "**/__tests__/*.s",
            "IntegrationTests/*.S",
            "IntegrationTests/*.c",
            "IntegrationTests/*.cc",
            "IntegrationTests/*.cpp",
            "IntegrationTests/*.cxx",
            "IntegrationTests/*.m",
            "IntegrationTests/*.mm",
            "IntegrationTests/*.s",
            "React/Cxx*/*.S",
            "React/Cxx*/*.c",
            "React/Cxx*/*.cc",
            "React/Cxx*/*.cpp",
            "React/Cxx*/*.cxx",
            "React/Cxx*/*.m",
            "React/Cxx*/*.mm",
            "React/Cxx*/*.s",
            "React/DevSupport/*.S",
            "React/DevSupport/*.c",
            "React/DevSupport/*.cc",
            "React/DevSupport/*.cpp",
            "React/DevSupport/*.cxx",
            "React/DevSupport/*.m",
            "React/DevSupport/*.mm",
            "React/DevSupport/*.s",
            "React/Fabric/**/*.S",
            "React/Fabric/**/*.c",
            "React/Fabric/**/*.cc",
            "React/Fabric/**/*.cpp",
            "React/Fabric/**/*.cxx",
            "React/Fabric/**/*.m",
            "React/Fabric/**/*.mm",
            "React/Fabric/**/*.s",
            "React/Inspector/*.S",
            "React/Inspector/*.c",
            "React/Inspector/*.cc",
            "React/Inspector/*.cpp",
            "React/Inspector/*.cxx",
            "React/Inspector/*.m",
            "React/Inspector/*.mm",
            "React/Inspector/*.s",
            "React/Modules/RCTClipboard*.S",
            "React/Modules/RCTClipboard*.c",
            "React/Modules/RCTClipboard*.cc",
            "React/Modules/RCTClipboard*.cpp",
            "React/Modules/RCTClipboard*.cxx",
            "React/Modules/RCTClipboard*.m",
            "React/Modules/RCTClipboard*.mm",
            "React/Modules/RCTClipboard*.s",
            "React/Views/RCTDatePicker*.S",
            "React/Views/RCTDatePicker*.c",
            "React/Views/RCTDatePicker*.cc",
            "React/Views/RCTDatePicker*.cpp",
            "React/Views/RCTDatePicker*.cxx",
            "React/Views/RCTDatePicker*.m",
            "React/Views/RCTDatePicker*.mm",
            "React/Views/RCTDatePicker*.s",
            "React/Views/RCTPicker*.S",
            "React/Views/RCTPicker*.c",
            "React/Views/RCTPicker*.cc",
            "React/Views/RCTPicker*.cpp",
            "React/Views/RCTPicker*.cxx",
            "React/Views/RCTPicker*.m",
            "React/Views/RCTPicker*.mm",
            "React/Views/RCTPicker*.s",
            "React/Views/RCTRefreshControl*.S",
            "React/Views/RCTRefreshControl*.c",
            "React/Views/RCTRefreshControl*.cc",
            "React/Views/RCTRefreshControl*.cpp",
            "React/Views/RCTRefreshControl*.cxx",
            "React/Views/RCTRefreshControl*.m",
            "React/Views/RCTRefreshControl*.mm",
            "React/Views/RCTRefreshControl*.s",
            "React/Views/RCTSlider*.S",
            "React/Views/RCTSlider*.c",
            "React/Views/RCTSlider*.cc",
            "React/Views/RCTSlider*.cpp",
            "React/Views/RCTSlider*.cxx",
            "React/Views/RCTSlider*.m",
            "React/Views/RCTSlider*.mm",
            "React/Views/RCTSlider*.s",
            "React/Views/RCTSwitch*.S",
            "React/Views/RCTSwitch*.c",
            "React/Views/RCTSwitch*.cc",
            "React/Views/RCTSwitch*.cpp",
            "React/Views/RCTSwitch*.cxx",
            "React/Views/RCTSwitch*.m",
            "React/Views/RCTSwitch*.mm",
            "React/Views/RCTSwitch*.s",
            "React/Views/RCTWebView*.S",
            "React/Views/RCTWebView*.c",
            "React/Views/RCTWebView*.cc",
            "React/Views/RCTWebView*.cpp",
            "React/Views/RCTWebView*.cxx",
            "React/Views/RCTWebView*.m",
            "React/Views/RCTWebView*.mm",
            "React/Views/RCTWebView*.s",
            "ReactCommon/yoga/*.S",
            "ReactCommon/yoga/*.c",
            "ReactCommon/yoga/*.cc",
            "ReactCommon/yoga/*.cpp",
            "ReactCommon/yoga/*.cxx",
            "ReactCommon/yoga/*.m",
            "ReactCommon/yoga/*.mm",
            "ReactCommon/yoga/*.s"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/Cxx*/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/Cxx*/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/DevSupport/*.cc",
            "React/DevSupport/*.cpp",
            "React/DevSupport/*.cxx",
            "React/DevSupport/*.mm",
            "React/Inspector/*.cc",
            "React/Inspector/*.cpp",
            "React/Inspector/*.cxx",
            "React/Inspector/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/DevSupport/*.S",
            "React/DevSupport/*.c",
            "React/DevSupport/*.m",
            "React/DevSupport/*.s",
            "React/Inspector/*.S",
            "React/Inspector/*.c",
            "React/Inspector/*.m",
            "React/Inspector/*.s"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/Fabric/**/*.cpp",
            "React/Fabric/**/*.mm"
          ],
          exclude = [
            "**/tests/*.S",
            "**/tests/*.c",
            "**/tests/*.cc",
            "**/tests/*.cpp",
            "**/tests/*.cxx",
            "**/tests/*.m",
            "**/tests/*.mm",
            "**/tests/*.s"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/Fabric/**/*.S",
            "React/Fabric/**/*.c",
            "React/Fabric/**/*.m"
          ],
          exclude = [
            "**/tests/*.S",
            "**/tests/*.c",
            "**/tests/*.cc",
            "**/tests/*.cpp",
            "**/tests/*.cxx",
            "**/tests/*.m",
            "**/tests/*.mm",
            "**/tests/*.s"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/**/RCTTV*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/ART/**/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/ActionSheetIOS/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/NativeAnimation/*.m",
            "Libraries/NativeAnimation/Drivers/*.m",
            "Libraries/NativeAnimation/Nodes/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Blob/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Blob/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/CameraRoll/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Geolocation/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Image/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Network/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Network/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/PushNotificationIOS/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Settings/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Text/**/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Vibration/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/WebSocket/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/LinkingIOS/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/RCTTest/**/*.m"
          ],
          exclude_directories = 1
        ),
        exclude_directories = 1
      ),
      ":watchosCase": glob(
        [
          "React/**/*.cpp",
          "React/**/*.mm"
        ],
        exclude = [
          "**/__tests__/*.S",
          "**/__tests__/*.c",
          "**/__tests__/*.cc",
          "**/__tests__/*.cpp",
          "**/__tests__/*.cxx",
          "**/__tests__/*.m",
          "**/__tests__/*.mm",
          "**/__tests__/*.s",
          "IntegrationTests/*.S",
          "IntegrationTests/*.c",
          "IntegrationTests/*.cc",
          "IntegrationTests/*.cpp",
          "IntegrationTests/*.cxx",
          "IntegrationTests/*.m",
          "IntegrationTests/*.mm",
          "IntegrationTests/*.s",
          "React/Cxx*/*.S",
          "React/Cxx*/*.c",
          "React/Cxx*/*.cc",
          "React/Cxx*/*.cpp",
          "React/Cxx*/*.cxx",
          "React/Cxx*/*.m",
          "React/Cxx*/*.mm",
          "React/Cxx*/*.s",
          "React/DevSupport/*.S",
          "React/DevSupport/*.c",
          "React/DevSupport/*.cc",
          "React/DevSupport/*.cpp",
          "React/DevSupport/*.cxx",
          "React/DevSupport/*.m",
          "React/DevSupport/*.mm",
          "React/DevSupport/*.s",
          "React/Fabric/**/*.S",
          "React/Fabric/**/*.c",
          "React/Fabric/**/*.cc",
          "React/Fabric/**/*.cpp",
          "React/Fabric/**/*.cxx",
          "React/Fabric/**/*.m",
          "React/Fabric/**/*.mm",
          "React/Fabric/**/*.s",
          "React/Inspector/*.S",
          "React/Inspector/*.c",
          "React/Inspector/*.cc",
          "React/Inspector/*.cpp",
          "React/Inspector/*.cxx",
          "React/Inspector/*.m",
          "React/Inspector/*.mm",
          "React/Inspector/*.s",
          "ReactCommon/yoga/*.S",
          "ReactCommon/yoga/*.c",
          "ReactCommon/yoga/*.cc",
          "ReactCommon/yoga/*.cpp",
          "ReactCommon/yoga/*.cxx",
          "ReactCommon/yoga/*.m",
          "ReactCommon/yoga/*.mm",
          "ReactCommon/yoga/*.s"
        ] + glob(
          [
            "React/**/*.S",
            "React/**/*.c",
            "React/**/*.m"
          ],
          exclude = [
            "**/__tests__/*.S",
            "**/__tests__/*.c",
            "**/__tests__/*.cc",
            "**/__tests__/*.cpp",
            "**/__tests__/*.cxx",
            "**/__tests__/*.m",
            "**/__tests__/*.mm",
            "**/__tests__/*.s",
            "IntegrationTests/*.S",
            "IntegrationTests/*.c",
            "IntegrationTests/*.cc",
            "IntegrationTests/*.cpp",
            "IntegrationTests/*.cxx",
            "IntegrationTests/*.m",
            "IntegrationTests/*.mm",
            "IntegrationTests/*.s",
            "React/Cxx*/*.S",
            "React/Cxx*/*.c",
            "React/Cxx*/*.cc",
            "React/Cxx*/*.cpp",
            "React/Cxx*/*.cxx",
            "React/Cxx*/*.m",
            "React/Cxx*/*.mm",
            "React/Cxx*/*.s",
            "React/DevSupport/*.S",
            "React/DevSupport/*.c",
            "React/DevSupport/*.cc",
            "React/DevSupport/*.cpp",
            "React/DevSupport/*.cxx",
            "React/DevSupport/*.m",
            "React/DevSupport/*.mm",
            "React/DevSupport/*.s",
            "React/Fabric/**/*.S",
            "React/Fabric/**/*.c",
            "React/Fabric/**/*.cc",
            "React/Fabric/**/*.cpp",
            "React/Fabric/**/*.cxx",
            "React/Fabric/**/*.m",
            "React/Fabric/**/*.mm",
            "React/Fabric/**/*.s",
            "React/Inspector/*.S",
            "React/Inspector/*.c",
            "React/Inspector/*.cc",
            "React/Inspector/*.cpp",
            "React/Inspector/*.cxx",
            "React/Inspector/*.m",
            "React/Inspector/*.mm",
            "React/Inspector/*.s",
            "ReactCommon/yoga/*.S",
            "ReactCommon/yoga/*.c",
            "ReactCommon/yoga/*.cc",
            "ReactCommon/yoga/*.cpp",
            "ReactCommon/yoga/*.cxx",
            "ReactCommon/yoga/*.m",
            "ReactCommon/yoga/*.mm",
            "ReactCommon/yoga/*.s"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/Cxx*/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/Cxx*/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/DevSupport/*.cc",
            "React/DevSupport/*.cpp",
            "React/DevSupport/*.cxx",
            "React/DevSupport/*.mm",
            "React/Inspector/*.cc",
            "React/Inspector/*.cpp",
            "React/Inspector/*.cxx",
            "React/Inspector/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/DevSupport/*.S",
            "React/DevSupport/*.c",
            "React/DevSupport/*.m",
            "React/DevSupport/*.s",
            "React/Inspector/*.S",
            "React/Inspector/*.c",
            "React/Inspector/*.m",
            "React/Inspector/*.s"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/Fabric/**/*.cpp",
            "React/Fabric/**/*.mm"
          ],
          exclude = [
            "**/tests/*.S",
            "**/tests/*.c",
            "**/tests/*.cc",
            "**/tests/*.cpp",
            "**/tests/*.cxx",
            "**/tests/*.m",
            "**/tests/*.mm",
            "**/tests/*.s"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/Fabric/**/*.S",
            "React/Fabric/**/*.c",
            "React/Fabric/**/*.m"
          ],
          exclude = [
            "**/tests/*.S",
            "**/tests/*.c",
            "**/tests/*.cc",
            "**/tests/*.cpp",
            "**/tests/*.cxx",
            "**/tests/*.m",
            "**/tests/*.mm",
            "**/tests/*.s"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/**/RCTTV*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/ART/**/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/ActionSheetIOS/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/NativeAnimation/*.m",
            "Libraries/NativeAnimation/Drivers/*.m",
            "Libraries/NativeAnimation/Nodes/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Blob/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Blob/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/CameraRoll/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Geolocation/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Image/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Network/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Network/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/PushNotificationIOS/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Settings/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Text/**/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Vibration/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/WebSocket/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/LinkingIOS/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/RCTTest/**/*.m"
          ],
          exclude_directories = 1
        ),
        exclude_directories = 1
      )
    }
  ),
  hdrs = [
    ":Core_cxx_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  sdk_frameworks = [
    "JavaScriptCore"
  ],
  sdk_dylibs = [
    "stdc++"
  ],
  deps = [
    "//Vendor/Yoga:Yoga",
    ":Core_cxx_includes"
  ],
  copts = [
    "-std=c++14"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "Core_cxx_acknowledgement",
  deps = [
    "//Vendor/Yoga:Yoga_acknowledgement"
  ],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "Core_direct_hdrs",
  srcs = select(
    {
      "//conditions:default": glob(
        glob(
          [
            "pod_support/Headers/Public/**/*"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/**/*.h"
          ],
          exclude = [
            "**/__tests__/*.h",
            "**/__tests__/*.hpp",
            "**/__tests__/*.hxx",
            "IntegrationTests/*.h",
            "IntegrationTests/*.hpp",
            "IntegrationTests/*.hxx",
            "React/**/RCTTV*.h",
            "React/**/RCTTV*.hpp",
            "React/**/RCTTV*.hxx",
            "React/Cxx*/*.h",
            "React/Cxx*/*.hpp",
            "React/Cxx*/*.hxx",
            "React/DevSupport/*.h",
            "React/DevSupport/*.hpp",
            "React/DevSupport/*.hxx",
            "React/Fabric/**/*.h",
            "React/Fabric/**/*.hpp",
            "React/Fabric/**/*.hxx",
            "React/Inspector/*.h",
            "React/Inspector/*.hpp",
            "React/Inspector/*.hxx",
            "ReactCommon/yoga/*.h",
            "ReactCommon/yoga/*.hpp",
            "ReactCommon/yoga/*.hxx"
          ],
          exclude_directories = 1
        ),
        exclude_directories = 1
      ),
      ":osxCase": glob(
        glob(
          [
            "pod_support/Headers/Public/**/*"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/**/*.h"
          ],
          exclude = [
            "**/__tests__/*.h",
            "**/__tests__/*.hpp",
            "**/__tests__/*.hxx",
            "IntegrationTests/*.h",
            "IntegrationTests/*.hpp",
            "IntegrationTests/*.hxx",
            "React/Cxx*/*.h",
            "React/Cxx*/*.hpp",
            "React/Cxx*/*.hxx",
            "React/DevSupport/*.h",
            "React/DevSupport/*.hpp",
            "React/DevSupport/*.hxx",
            "React/Fabric/**/*.h",
            "React/Fabric/**/*.hpp",
            "React/Fabric/**/*.hxx",
            "React/Inspector/*.h",
            "React/Inspector/*.hpp",
            "React/Inspector/*.hxx",
            "ReactCommon/yoga/*.h",
            "ReactCommon/yoga/*.hpp",
            "ReactCommon/yoga/*.hxx"
          ],
          exclude_directories = 1
        ),
        exclude_directories = 1
      ),
      ":tvosCase": glob(
        glob(
          [
            "pod_support/Headers/Public/**/*"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/**/*.h"
          ],
          exclude = [
            "**/__tests__/*.h",
            "**/__tests__/*.hpp",
            "**/__tests__/*.hxx",
            "IntegrationTests/*.h",
            "IntegrationTests/*.hpp",
            "IntegrationTests/*.hxx",
            "React/Cxx*/*.h",
            "React/Cxx*/*.hpp",
            "React/Cxx*/*.hxx",
            "React/DevSupport/*.h",
            "React/DevSupport/*.hpp",
            "React/DevSupport/*.hxx",
            "React/Fabric/**/*.h",
            "React/Fabric/**/*.hpp",
            "React/Fabric/**/*.hxx",
            "React/Inspector/*.h",
            "React/Inspector/*.hpp",
            "React/Inspector/*.hxx",
            "React/Modules/RCTClipboard*.h",
            "React/Modules/RCTClipboard*.hpp",
            "React/Modules/RCTClipboard*.hxx",
            "React/Views/RCTDatePicker*.h",
            "React/Views/RCTDatePicker*.hpp",
            "React/Views/RCTDatePicker*.hxx",
            "React/Views/RCTPicker*.h",
            "React/Views/RCTPicker*.hpp",
            "React/Views/RCTPicker*.hxx",
            "React/Views/RCTRefreshControl*.h",
            "React/Views/RCTRefreshControl*.hpp",
            "React/Views/RCTRefreshControl*.hxx",
            "React/Views/RCTSlider*.h",
            "React/Views/RCTSlider*.hpp",
            "React/Views/RCTSlider*.hxx",
            "React/Views/RCTSwitch*.h",
            "React/Views/RCTSwitch*.hpp",
            "React/Views/RCTSwitch*.hxx",
            "React/Views/RCTWebView*.h",
            "React/Views/RCTWebView*.hpp",
            "React/Views/RCTWebView*.hxx",
            "ReactCommon/yoga/*.h",
            "ReactCommon/yoga/*.hpp",
            "ReactCommon/yoga/*.hxx"
          ],
          exclude_directories = 1
        ),
        exclude_directories = 1
      ),
      ":watchosCase": glob(
        glob(
          [
            "pod_support/Headers/Public/**/*"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/**/*.h"
          ],
          exclude = [
            "**/__tests__/*.h",
            "**/__tests__/*.hpp",
            "**/__tests__/*.hxx",
            "IntegrationTests/*.h",
            "IntegrationTests/*.hpp",
            "IntegrationTests/*.hxx",
            "React/Cxx*/*.h",
            "React/Cxx*/*.hpp",
            "React/Cxx*/*.hxx",
            "React/DevSupport/*.h",
            "React/DevSupport/*.hpp",
            "React/DevSupport/*.hxx",
            "React/Fabric/**/*.h",
            "React/Fabric/**/*.hpp",
            "React/Fabric/**/*.hxx",
            "React/Inspector/*.h",
            "React/Inspector/*.hpp",
            "React/Inspector/*.hxx",
            "ReactCommon/yoga/*.h",
            "ReactCommon/yoga/*.hpp",
            "ReactCommon/yoga/*.hxx"
          ],
          exclude_directories = 1
        ),
        exclude_directories = 1
      )
    }
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Core_public_hdrs",
  srcs = glob(
    [
      "React/**/*.h"
    ],
    exclude_directories = 1
  ) + [
    ":Core_cxx_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Core_hdrs",
  srcs = select(
    {
      "//conditions:default": glob(
        glob(
          [
            "pod_support/Headers/Public/**/*"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/**/*.h"
          ],
          exclude = [
            "**/__tests__/*.h",
            "**/__tests__/*.hpp",
            "**/__tests__/*.hxx",
            "IntegrationTests/*.h",
            "IntegrationTests/*.hpp",
            "IntegrationTests/*.hxx",
            "React/**/RCTTV*.h",
            "React/**/RCTTV*.hpp",
            "React/**/RCTTV*.hxx",
            "React/Cxx*/*.h",
            "React/Cxx*/*.hpp",
            "React/Cxx*/*.hxx",
            "React/DevSupport/*.h",
            "React/DevSupport/*.hpp",
            "React/DevSupport/*.hxx",
            "React/Fabric/**/*.h",
            "React/Fabric/**/*.hpp",
            "React/Fabric/**/*.hxx",
            "React/Inspector/*.h",
            "React/Inspector/*.hpp",
            "React/Inspector/*.hxx",
            "ReactCommon/yoga/*.h",
            "ReactCommon/yoga/*.hpp",
            "ReactCommon/yoga/*.hxx"
          ],
          exclude_directories = 1
        ),
        exclude_directories = 1
      ),
      ":osxCase": glob(
        glob(
          [
            "pod_support/Headers/Public/**/*"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/**/*.h"
          ],
          exclude = [
            "**/__tests__/*.h",
            "**/__tests__/*.hpp",
            "**/__tests__/*.hxx",
            "IntegrationTests/*.h",
            "IntegrationTests/*.hpp",
            "IntegrationTests/*.hxx",
            "React/Cxx*/*.h",
            "React/Cxx*/*.hpp",
            "React/Cxx*/*.hxx",
            "React/DevSupport/*.h",
            "React/DevSupport/*.hpp",
            "React/DevSupport/*.hxx",
            "React/Fabric/**/*.h",
            "React/Fabric/**/*.hpp",
            "React/Fabric/**/*.hxx",
            "React/Inspector/*.h",
            "React/Inspector/*.hpp",
            "React/Inspector/*.hxx",
            "ReactCommon/yoga/*.h",
            "ReactCommon/yoga/*.hpp",
            "ReactCommon/yoga/*.hxx"
          ],
          exclude_directories = 1
        ),
        exclude_directories = 1
      ),
      ":tvosCase": glob(
        glob(
          [
            "pod_support/Headers/Public/**/*"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/**/*.h"
          ],
          exclude = [
            "**/__tests__/*.h",
            "**/__tests__/*.hpp",
            "**/__tests__/*.hxx",
            "IntegrationTests/*.h",
            "IntegrationTests/*.hpp",
            "IntegrationTests/*.hxx",
            "React/Cxx*/*.h",
            "React/Cxx*/*.hpp",
            "React/Cxx*/*.hxx",
            "React/DevSupport/*.h",
            "React/DevSupport/*.hpp",
            "React/DevSupport/*.hxx",
            "React/Fabric/**/*.h",
            "React/Fabric/**/*.hpp",
            "React/Fabric/**/*.hxx",
            "React/Inspector/*.h",
            "React/Inspector/*.hpp",
            "React/Inspector/*.hxx",
            "React/Modules/RCTClipboard*.h",
            "React/Modules/RCTClipboard*.hpp",
            "React/Modules/RCTClipboard*.hxx",
            "React/Views/RCTDatePicker*.h",
            "React/Views/RCTDatePicker*.hpp",
            "React/Views/RCTDatePicker*.hxx",
            "React/Views/RCTPicker*.h",
            "React/Views/RCTPicker*.hpp",
            "React/Views/RCTPicker*.hxx",
            "React/Views/RCTRefreshControl*.h",
            "React/Views/RCTRefreshControl*.hpp",
            "React/Views/RCTRefreshControl*.hxx",
            "React/Views/RCTSlider*.h",
            "React/Views/RCTSlider*.hpp",
            "React/Views/RCTSlider*.hxx",
            "React/Views/RCTSwitch*.h",
            "React/Views/RCTSwitch*.hpp",
            "React/Views/RCTSwitch*.hxx",
            "React/Views/RCTWebView*.h",
            "React/Views/RCTWebView*.hpp",
            "React/Views/RCTWebView*.hxx",
            "ReactCommon/yoga/*.h",
            "ReactCommon/yoga/*.hpp",
            "ReactCommon/yoga/*.hxx"
          ],
          exclude_directories = 1
        ),
        exclude_directories = 1
      ),
      ":watchosCase": glob(
        glob(
          [
            "pod_support/Headers/Public/**/*"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/**/*.h"
          ],
          exclude = [
            "**/__tests__/*.h",
            "**/__tests__/*.hpp",
            "**/__tests__/*.hxx",
            "IntegrationTests/*.h",
            "IntegrationTests/*.hpp",
            "IntegrationTests/*.hxx",
            "React/Cxx*/*.h",
            "React/Cxx*/*.hpp",
            "React/Cxx*/*.hxx",
            "React/DevSupport/*.h",
            "React/DevSupport/*.hpp",
            "React/DevSupport/*.hxx",
            "React/Fabric/**/*.h",
            "React/Fabric/**/*.hpp",
            "React/Fabric/**/*.hxx",
            "React/Inspector/*.h",
            "React/Inspector/*.hpp",
            "React/Inspector/*.hxx",
            "ReactCommon/yoga/*.h",
            "ReactCommon/yoga/*.hpp",
            "ReactCommon/yoga/*.hxx"
          ],
          exclude_directories = 1
        ),
        exclude_directories = 1
      )
    }
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "Core_union_hdrs",
  srcs = [
    "Core_hdrs",
    "React_hdrs",
    ":Core_cxx_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "Core_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":Core_union_hdrs"
  ],
  deps = [
    "//Vendor/Yoga:Yoga",
    ":Core_cxx_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "Core_includes",
  include = [
    "Vendor/React/ReactCommon",
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "Core",
  enable_modules = 0,
  srcs = select(
    {
      "//conditions:default": glob(
        [
          "React/**/*.S",
          "React/**/*.c",
          "React/**/*.m"
        ],
        exclude = [
          "**/__tests__/*.S",
          "**/__tests__/*.c",
          "**/__tests__/*.cc",
          "**/__tests__/*.cpp",
          "**/__tests__/*.cxx",
          "**/__tests__/*.m",
          "**/__tests__/*.mm",
          "**/__tests__/*.s",
          "IntegrationTests/*.S",
          "IntegrationTests/*.c",
          "IntegrationTests/*.cc",
          "IntegrationTests/*.cpp",
          "IntegrationTests/*.cxx",
          "IntegrationTests/*.m",
          "IntegrationTests/*.mm",
          "IntegrationTests/*.s",
          "React/**/RCTTV*.S",
          "React/**/RCTTV*.c",
          "React/**/RCTTV*.cc",
          "React/**/RCTTV*.cpp",
          "React/**/RCTTV*.cxx",
          "React/**/RCTTV*.m",
          "React/**/RCTTV*.mm",
          "React/**/RCTTV*.s",
          "React/Cxx*/*.S",
          "React/Cxx*/*.c",
          "React/Cxx*/*.cc",
          "React/Cxx*/*.cpp",
          "React/Cxx*/*.cxx",
          "React/Cxx*/*.m",
          "React/Cxx*/*.mm",
          "React/Cxx*/*.s",
          "React/DevSupport/*.S",
          "React/DevSupport/*.c",
          "React/DevSupport/*.cc",
          "React/DevSupport/*.cpp",
          "React/DevSupport/*.cxx",
          "React/DevSupport/*.m",
          "React/DevSupport/*.mm",
          "React/DevSupport/*.s",
          "React/Fabric/**/*.S",
          "React/Fabric/**/*.c",
          "React/Fabric/**/*.cc",
          "React/Fabric/**/*.cpp",
          "React/Fabric/**/*.cxx",
          "React/Fabric/**/*.m",
          "React/Fabric/**/*.mm",
          "React/Fabric/**/*.s",
          "React/Inspector/*.S",
          "React/Inspector/*.c",
          "React/Inspector/*.cc",
          "React/Inspector/*.cpp",
          "React/Inspector/*.cxx",
          "React/Inspector/*.m",
          "React/Inspector/*.mm",
          "React/Inspector/*.s",
          "ReactCommon/yoga/*.S",
          "ReactCommon/yoga/*.c",
          "ReactCommon/yoga/*.cc",
          "ReactCommon/yoga/*.cpp",
          "ReactCommon/yoga/*.cxx",
          "ReactCommon/yoga/*.m",
          "ReactCommon/yoga/*.mm",
          "ReactCommon/yoga/*.s"
        ] + glob(
          [
            "React/Cxx*/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/Cxx*/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/DevSupport/*.cc",
            "React/DevSupport/*.cpp",
            "React/DevSupport/*.cxx",
            "React/DevSupport/*.mm",
            "React/Inspector/*.cc",
            "React/Inspector/*.cpp",
            "React/Inspector/*.cxx",
            "React/Inspector/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/DevSupport/*.S",
            "React/DevSupport/*.c",
            "React/DevSupport/*.m",
            "React/DevSupport/*.s",
            "React/Inspector/*.S",
            "React/Inspector/*.c",
            "React/Inspector/*.m",
            "React/Inspector/*.s"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/Fabric/**/*.cpp",
            "React/Fabric/**/*.mm"
          ],
          exclude = [
            "**/tests/*.S",
            "**/tests/*.c",
            "**/tests/*.cc",
            "**/tests/*.cpp",
            "**/tests/*.cxx",
            "**/tests/*.m",
            "**/tests/*.mm",
            "**/tests/*.s"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/Fabric/**/*.S",
            "React/Fabric/**/*.c",
            "React/Fabric/**/*.m"
          ],
          exclude = [
            "**/tests/*.S",
            "**/tests/*.c",
            "**/tests/*.cc",
            "**/tests/*.cpp",
            "**/tests/*.cxx",
            "**/tests/*.m",
            "**/tests/*.mm",
            "**/tests/*.s"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/**/RCTTV*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/ART/**/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/ActionSheetIOS/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/NativeAnimation/*.m",
            "Libraries/NativeAnimation/Drivers/*.m",
            "Libraries/NativeAnimation/Nodes/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Blob/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Blob/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/CameraRoll/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Geolocation/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Image/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Network/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Network/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/PushNotificationIOS/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Settings/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Text/**/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Vibration/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/WebSocket/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/LinkingIOS/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/RCTTest/**/*.m"
          ],
          exclude_directories = 1
        ),
        exclude_directories = 1
      ),
      ":osxCase": glob(
        [
          "React/**/*.S",
          "React/**/*.c",
          "React/**/*.m"
        ],
        exclude = [
          "**/__tests__/*.S",
          "**/__tests__/*.c",
          "**/__tests__/*.cc",
          "**/__tests__/*.cpp",
          "**/__tests__/*.cxx",
          "**/__tests__/*.m",
          "**/__tests__/*.mm",
          "**/__tests__/*.s",
          "IntegrationTests/*.S",
          "IntegrationTests/*.c",
          "IntegrationTests/*.cc",
          "IntegrationTests/*.cpp",
          "IntegrationTests/*.cxx",
          "IntegrationTests/*.m",
          "IntegrationTests/*.mm",
          "IntegrationTests/*.s",
          "React/Cxx*/*.S",
          "React/Cxx*/*.c",
          "React/Cxx*/*.cc",
          "React/Cxx*/*.cpp",
          "React/Cxx*/*.cxx",
          "React/Cxx*/*.m",
          "React/Cxx*/*.mm",
          "React/Cxx*/*.s",
          "React/DevSupport/*.S",
          "React/DevSupport/*.c",
          "React/DevSupport/*.cc",
          "React/DevSupport/*.cpp",
          "React/DevSupport/*.cxx",
          "React/DevSupport/*.m",
          "React/DevSupport/*.mm",
          "React/DevSupport/*.s",
          "React/Fabric/**/*.S",
          "React/Fabric/**/*.c",
          "React/Fabric/**/*.cc",
          "React/Fabric/**/*.cpp",
          "React/Fabric/**/*.cxx",
          "React/Fabric/**/*.m",
          "React/Fabric/**/*.mm",
          "React/Fabric/**/*.s",
          "React/Inspector/*.S",
          "React/Inspector/*.c",
          "React/Inspector/*.cc",
          "React/Inspector/*.cpp",
          "React/Inspector/*.cxx",
          "React/Inspector/*.m",
          "React/Inspector/*.mm",
          "React/Inspector/*.s",
          "ReactCommon/yoga/*.S",
          "ReactCommon/yoga/*.c",
          "ReactCommon/yoga/*.cc",
          "ReactCommon/yoga/*.cpp",
          "ReactCommon/yoga/*.cxx",
          "ReactCommon/yoga/*.m",
          "ReactCommon/yoga/*.mm",
          "ReactCommon/yoga/*.s"
        ] + glob(
          [
            "React/Cxx*/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/Cxx*/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/DevSupport/*.cc",
            "React/DevSupport/*.cpp",
            "React/DevSupport/*.cxx",
            "React/DevSupport/*.mm",
            "React/Inspector/*.cc",
            "React/Inspector/*.cpp",
            "React/Inspector/*.cxx",
            "React/Inspector/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/DevSupport/*.S",
            "React/DevSupport/*.c",
            "React/DevSupport/*.m",
            "React/DevSupport/*.s",
            "React/Inspector/*.S",
            "React/Inspector/*.c",
            "React/Inspector/*.m",
            "React/Inspector/*.s"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/Fabric/**/*.cpp",
            "React/Fabric/**/*.mm"
          ],
          exclude = [
            "**/tests/*.S",
            "**/tests/*.c",
            "**/tests/*.cc",
            "**/tests/*.cpp",
            "**/tests/*.cxx",
            "**/tests/*.m",
            "**/tests/*.mm",
            "**/tests/*.s"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/Fabric/**/*.S",
            "React/Fabric/**/*.c",
            "React/Fabric/**/*.m"
          ],
          exclude = [
            "**/tests/*.S",
            "**/tests/*.c",
            "**/tests/*.cc",
            "**/tests/*.cpp",
            "**/tests/*.cxx",
            "**/tests/*.m",
            "**/tests/*.mm",
            "**/tests/*.s"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/**/RCTTV*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/ART/**/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/ActionSheetIOS/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/NativeAnimation/*.m",
            "Libraries/NativeAnimation/Drivers/*.m",
            "Libraries/NativeAnimation/Nodes/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Blob/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Blob/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/CameraRoll/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Geolocation/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Image/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Network/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Network/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/PushNotificationIOS/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Settings/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Text/**/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Vibration/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/WebSocket/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/LinkingIOS/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/RCTTest/**/*.m"
          ],
          exclude_directories = 1
        ),
        exclude_directories = 1
      ),
      ":tvosCase": glob(
        [
          "React/**/*.S",
          "React/**/*.c",
          "React/**/*.m"
        ],
        exclude = [
          "**/__tests__/*.S",
          "**/__tests__/*.c",
          "**/__tests__/*.cc",
          "**/__tests__/*.cpp",
          "**/__tests__/*.cxx",
          "**/__tests__/*.m",
          "**/__tests__/*.mm",
          "**/__tests__/*.s",
          "IntegrationTests/*.S",
          "IntegrationTests/*.c",
          "IntegrationTests/*.cc",
          "IntegrationTests/*.cpp",
          "IntegrationTests/*.cxx",
          "IntegrationTests/*.m",
          "IntegrationTests/*.mm",
          "IntegrationTests/*.s",
          "React/Cxx*/*.S",
          "React/Cxx*/*.c",
          "React/Cxx*/*.cc",
          "React/Cxx*/*.cpp",
          "React/Cxx*/*.cxx",
          "React/Cxx*/*.m",
          "React/Cxx*/*.mm",
          "React/Cxx*/*.s",
          "React/DevSupport/*.S",
          "React/DevSupport/*.c",
          "React/DevSupport/*.cc",
          "React/DevSupport/*.cpp",
          "React/DevSupport/*.cxx",
          "React/DevSupport/*.m",
          "React/DevSupport/*.mm",
          "React/DevSupport/*.s",
          "React/Fabric/**/*.S",
          "React/Fabric/**/*.c",
          "React/Fabric/**/*.cc",
          "React/Fabric/**/*.cpp",
          "React/Fabric/**/*.cxx",
          "React/Fabric/**/*.m",
          "React/Fabric/**/*.mm",
          "React/Fabric/**/*.s",
          "React/Inspector/*.S",
          "React/Inspector/*.c",
          "React/Inspector/*.cc",
          "React/Inspector/*.cpp",
          "React/Inspector/*.cxx",
          "React/Inspector/*.m",
          "React/Inspector/*.mm",
          "React/Inspector/*.s",
          "React/Modules/RCTClipboard*.S",
          "React/Modules/RCTClipboard*.c",
          "React/Modules/RCTClipboard*.cc",
          "React/Modules/RCTClipboard*.cpp",
          "React/Modules/RCTClipboard*.cxx",
          "React/Modules/RCTClipboard*.m",
          "React/Modules/RCTClipboard*.mm",
          "React/Modules/RCTClipboard*.s",
          "React/Views/RCTDatePicker*.S",
          "React/Views/RCTDatePicker*.c",
          "React/Views/RCTDatePicker*.cc",
          "React/Views/RCTDatePicker*.cpp",
          "React/Views/RCTDatePicker*.cxx",
          "React/Views/RCTDatePicker*.m",
          "React/Views/RCTDatePicker*.mm",
          "React/Views/RCTDatePicker*.s",
          "React/Views/RCTPicker*.S",
          "React/Views/RCTPicker*.c",
          "React/Views/RCTPicker*.cc",
          "React/Views/RCTPicker*.cpp",
          "React/Views/RCTPicker*.cxx",
          "React/Views/RCTPicker*.m",
          "React/Views/RCTPicker*.mm",
          "React/Views/RCTPicker*.s",
          "React/Views/RCTRefreshControl*.S",
          "React/Views/RCTRefreshControl*.c",
          "React/Views/RCTRefreshControl*.cc",
          "React/Views/RCTRefreshControl*.cpp",
          "React/Views/RCTRefreshControl*.cxx",
          "React/Views/RCTRefreshControl*.m",
          "React/Views/RCTRefreshControl*.mm",
          "React/Views/RCTRefreshControl*.s",
          "React/Views/RCTSlider*.S",
          "React/Views/RCTSlider*.c",
          "React/Views/RCTSlider*.cc",
          "React/Views/RCTSlider*.cpp",
          "React/Views/RCTSlider*.cxx",
          "React/Views/RCTSlider*.m",
          "React/Views/RCTSlider*.mm",
          "React/Views/RCTSlider*.s",
          "React/Views/RCTSwitch*.S",
          "React/Views/RCTSwitch*.c",
          "React/Views/RCTSwitch*.cc",
          "React/Views/RCTSwitch*.cpp",
          "React/Views/RCTSwitch*.cxx",
          "React/Views/RCTSwitch*.m",
          "React/Views/RCTSwitch*.mm",
          "React/Views/RCTSwitch*.s",
          "React/Views/RCTWebView*.S",
          "React/Views/RCTWebView*.c",
          "React/Views/RCTWebView*.cc",
          "React/Views/RCTWebView*.cpp",
          "React/Views/RCTWebView*.cxx",
          "React/Views/RCTWebView*.m",
          "React/Views/RCTWebView*.mm",
          "React/Views/RCTWebView*.s",
          "ReactCommon/yoga/*.S",
          "ReactCommon/yoga/*.c",
          "ReactCommon/yoga/*.cc",
          "ReactCommon/yoga/*.cpp",
          "ReactCommon/yoga/*.cxx",
          "ReactCommon/yoga/*.m",
          "ReactCommon/yoga/*.mm",
          "ReactCommon/yoga/*.s"
        ] + glob(
          [
            "React/Cxx*/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/Cxx*/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/DevSupport/*.cc",
            "React/DevSupport/*.cpp",
            "React/DevSupport/*.cxx",
            "React/DevSupport/*.mm",
            "React/Inspector/*.cc",
            "React/Inspector/*.cpp",
            "React/Inspector/*.cxx",
            "React/Inspector/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/DevSupport/*.S",
            "React/DevSupport/*.c",
            "React/DevSupport/*.m",
            "React/DevSupport/*.s",
            "React/Inspector/*.S",
            "React/Inspector/*.c",
            "React/Inspector/*.m",
            "React/Inspector/*.s"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/Fabric/**/*.cpp",
            "React/Fabric/**/*.mm"
          ],
          exclude = [
            "**/tests/*.S",
            "**/tests/*.c",
            "**/tests/*.cc",
            "**/tests/*.cpp",
            "**/tests/*.cxx",
            "**/tests/*.m",
            "**/tests/*.mm",
            "**/tests/*.s"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/Fabric/**/*.S",
            "React/Fabric/**/*.c",
            "React/Fabric/**/*.m"
          ],
          exclude = [
            "**/tests/*.S",
            "**/tests/*.c",
            "**/tests/*.cc",
            "**/tests/*.cpp",
            "**/tests/*.cxx",
            "**/tests/*.m",
            "**/tests/*.mm",
            "**/tests/*.s"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/**/RCTTV*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/ART/**/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/ActionSheetIOS/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/NativeAnimation/*.m",
            "Libraries/NativeAnimation/Drivers/*.m",
            "Libraries/NativeAnimation/Nodes/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Blob/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Blob/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/CameraRoll/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Geolocation/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Image/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Network/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Network/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/PushNotificationIOS/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Settings/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Text/**/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Vibration/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/WebSocket/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/LinkingIOS/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/RCTTest/**/*.m"
          ],
          exclude_directories = 1
        ),
        exclude_directories = 1
      ),
      ":watchosCase": glob(
        [
          "React/**/*.S",
          "React/**/*.c",
          "React/**/*.m"
        ],
        exclude = [
          "**/__tests__/*.S",
          "**/__tests__/*.c",
          "**/__tests__/*.cc",
          "**/__tests__/*.cpp",
          "**/__tests__/*.cxx",
          "**/__tests__/*.m",
          "**/__tests__/*.mm",
          "**/__tests__/*.s",
          "IntegrationTests/*.S",
          "IntegrationTests/*.c",
          "IntegrationTests/*.cc",
          "IntegrationTests/*.cpp",
          "IntegrationTests/*.cxx",
          "IntegrationTests/*.m",
          "IntegrationTests/*.mm",
          "IntegrationTests/*.s",
          "React/Cxx*/*.S",
          "React/Cxx*/*.c",
          "React/Cxx*/*.cc",
          "React/Cxx*/*.cpp",
          "React/Cxx*/*.cxx",
          "React/Cxx*/*.m",
          "React/Cxx*/*.mm",
          "React/Cxx*/*.s",
          "React/DevSupport/*.S",
          "React/DevSupport/*.c",
          "React/DevSupport/*.cc",
          "React/DevSupport/*.cpp",
          "React/DevSupport/*.cxx",
          "React/DevSupport/*.m",
          "React/DevSupport/*.mm",
          "React/DevSupport/*.s",
          "React/Fabric/**/*.S",
          "React/Fabric/**/*.c",
          "React/Fabric/**/*.cc",
          "React/Fabric/**/*.cpp",
          "React/Fabric/**/*.cxx",
          "React/Fabric/**/*.m",
          "React/Fabric/**/*.mm",
          "React/Fabric/**/*.s",
          "React/Inspector/*.S",
          "React/Inspector/*.c",
          "React/Inspector/*.cc",
          "React/Inspector/*.cpp",
          "React/Inspector/*.cxx",
          "React/Inspector/*.m",
          "React/Inspector/*.mm",
          "React/Inspector/*.s",
          "ReactCommon/yoga/*.S",
          "ReactCommon/yoga/*.c",
          "ReactCommon/yoga/*.cc",
          "ReactCommon/yoga/*.cpp",
          "ReactCommon/yoga/*.cxx",
          "ReactCommon/yoga/*.m",
          "ReactCommon/yoga/*.mm",
          "ReactCommon/yoga/*.s"
        ] + glob(
          [
            "React/Cxx*/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/Cxx*/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/DevSupport/*.cc",
            "React/DevSupport/*.cpp",
            "React/DevSupport/*.cxx",
            "React/DevSupport/*.mm",
            "React/Inspector/*.cc",
            "React/Inspector/*.cpp",
            "React/Inspector/*.cxx",
            "React/Inspector/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/DevSupport/*.S",
            "React/DevSupport/*.c",
            "React/DevSupport/*.m",
            "React/DevSupport/*.s",
            "React/Inspector/*.S",
            "React/Inspector/*.c",
            "React/Inspector/*.m",
            "React/Inspector/*.s"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/Fabric/**/*.cpp",
            "React/Fabric/**/*.mm"
          ],
          exclude = [
            "**/tests/*.S",
            "**/tests/*.c",
            "**/tests/*.cc",
            "**/tests/*.cpp",
            "**/tests/*.cxx",
            "**/tests/*.m",
            "**/tests/*.mm",
            "**/tests/*.s"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/Fabric/**/*.S",
            "React/Fabric/**/*.c",
            "React/Fabric/**/*.m"
          ],
          exclude = [
            "**/tests/*.S",
            "**/tests/*.c",
            "**/tests/*.cc",
            "**/tests/*.cpp",
            "**/tests/*.cxx",
            "**/tests/*.m",
            "**/tests/*.mm",
            "**/tests/*.s"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "React/**/RCTTV*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/ART/**/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/ActionSheetIOS/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/NativeAnimation/*.m",
            "Libraries/NativeAnimation/Drivers/*.m",
            "Libraries/NativeAnimation/Nodes/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Blob/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Blob/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/CameraRoll/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Geolocation/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Image/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Network/*.mm"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Network/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/PushNotificationIOS/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Settings/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Text/**/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/Vibration/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/WebSocket/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/LinkingIOS/*.m"
          ],
          exclude_directories = 1
        ) + glob(
          [
            "Libraries/RCTTest/**/*.m"
          ],
          exclude_directories = 1
        ),
        exclude_directories = 1
      )
    }
  ),
  hdrs = [
    ":Core_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  sdk_frameworks = [
    "JavaScriptCore"
  ],
  sdk_dylibs = [
    "stdc++"
  ],
  deps = [
    "//Vendor/Yoga:Yoga",
    ":Core_cxx",
    ":Core_includes"
  ],
  copts = select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "Core_acknowledgement",
  deps = [
    "//Vendor/Yoga:Yoga_acknowledgement"
  ],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "CxxBridge_cxx_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/Cxx*/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "CxxBridge_cxx_public_hdrs",
  srcs = [
    ":Core_public_hdrs",
    ":cxxreact_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "CxxBridge_cxx_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/Cxx*/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "CxxBridge_cxx_union_hdrs",
  srcs = [
    "CxxBridge_cxx_hdrs",
    "React_hdrs",
    ":Core_hdrs",
    ":cxxreact_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "CxxBridge_cxx_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":CxxBridge_cxx_union_hdrs"
  ],
  deps = [
    "//Vendor/Folly:Folly",
    ":Core_hmap",
    ":cxxreact_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "CxxBridge_cxx_includes",
  include = [
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "CxxBridge_cxx",
  enable_modules = 0,
  srcs = glob(
    [
      "React/Cxx*/*.mm"
    ],
    exclude = glob(
      [
        "React/Cxx*/*.m"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  hdrs = [
    ":CxxBridge_cxx_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    "//Vendor/Folly:Folly",
    ":Core",
    ":cxxreact",
    ":CxxBridge_cxx_includes"
  ],
  copts = [
    "-std=c++14",
    "-std=c++14",
    "-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "CxxBridge_cxx_acknowledgement",
  deps = [
    "//Vendor/Folly:Folly_acknowledgement"
  ],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "CxxBridge_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/Cxx*/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "CxxBridge_public_hdrs",
  srcs = [
    ":Core_public_hdrs",
    ":CxxBridge_cxx_public_hdrs",
    ":cxxreact_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "CxxBridge_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/Cxx*/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "CxxBridge_union_hdrs",
  srcs = [
    "CxxBridge_hdrs",
    "React_hdrs",
    ":Core_hdrs",
    ":CxxBridge_cxx_hdrs",
    ":cxxreact_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "CxxBridge_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":CxxBridge_union_hdrs"
  ],
  deps = [
    "//Vendor/Folly:Folly",
    ":Core_hmap",
    ":CxxBridge_cxx_hmap",
    ":cxxreact_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "CxxBridge_includes",
  include = [
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "CxxBridge",
  enable_modules = 0,
  srcs = glob(
    [
      "React/Cxx*/*.m"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":CxxBridge_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    "//Vendor/Folly:Folly",
    ":Core",
    ":CxxBridge_cxx",
    ":cxxreact",
    ":CxxBridge_includes"
  ],
  copts = [
    "-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "CxxBridge_acknowledgement",
  deps = [
    "//Vendor/Folly:Folly_acknowledgement"
  ],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "DevSupport_cxx_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/DevSupport/*.h",
        "React/DevSupport/*.hpp",
        "React/DevSupport/*.hxx",
        "React/Inspector/*.h",
        "React/Inspector/*.hpp",
        "React/Inspector/*.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "DevSupport_cxx_public_hdrs",
  srcs = glob(
    [
      "React/DevSupport/*.h",
      "React/DevSupport/*.hpp",
      "React/DevSupport/*.hxx",
      "React/Inspector/*.h",
      "React/Inspector/*.hpp",
      "React/Inspector/*.hxx"
    ],
    exclude_directories = 1
  ) + [
    ":Core_public_hdrs",
    ":RCTWebSocket_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "DevSupport_cxx_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/DevSupport/*.h",
        "React/DevSupport/*.hpp",
        "React/DevSupport/*.hxx",
        "React/Inspector/*.h",
        "React/Inspector/*.hpp",
        "React/Inspector/*.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "DevSupport_cxx_union_hdrs",
  srcs = [
    "DevSupport_cxx_hdrs",
    "React_hdrs",
    ":Core_hdrs",
    ":RCTWebSocket_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "DevSupport_cxx_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":DevSupport_cxx_union_hdrs"
  ],
  deps = [
    ":Core_hmap",
    ":RCTWebSocket_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "DevSupport_cxx_includes",
  include = [
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "DevSupport_cxx",
  enable_modules = 0,
  srcs = glob(
    [
      "React/DevSupport/*.cc",
      "React/DevSupport/*.cpp",
      "React/DevSupport/*.cxx",
      "React/DevSupport/*.mm",
      "React/Inspector/*.cc",
      "React/Inspector/*.cpp",
      "React/Inspector/*.cxx",
      "React/Inspector/*.mm"
    ],
    exclude = glob(
      [
        "React/DevSupport/*.S",
        "React/DevSupport/*.c",
        "React/DevSupport/*.m",
        "React/DevSupport/*.s",
        "React/Inspector/*.S",
        "React/Inspector/*.c",
        "React/Inspector/*.m",
        "React/Inspector/*.s"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  module_map = ":React_extended_module_map_module_map_file",
  hdrs = [
    ":DevSupport_cxx_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    ":Core",
    ":RCTWebSocket",
    ":DevSupport_cxx_includes"
  ],
  copts = [
    "-std=c++14",
    "-std=c++14"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "DevSupport_cxx_acknowledgement",
  deps = [],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "DevSupport_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/DevSupport/*.h",
        "React/DevSupport/*.hpp",
        "React/DevSupport/*.hxx",
        "React/Inspector/*.h",
        "React/Inspector/*.hpp",
        "React/Inspector/*.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "DevSupport_public_hdrs",
  srcs = glob(
    [
      "React/DevSupport/*.h",
      "React/DevSupport/*.hpp",
      "React/DevSupport/*.hxx",
      "React/Inspector/*.h",
      "React/Inspector/*.hpp",
      "React/Inspector/*.hxx"
    ],
    exclude_directories = 1
  ) + [
    ":Core_public_hdrs",
    ":DevSupport_cxx_public_hdrs",
    ":RCTWebSocket_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "DevSupport_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/DevSupport/*.h",
        "React/DevSupport/*.hpp",
        "React/DevSupport/*.hxx",
        "React/Inspector/*.h",
        "React/Inspector/*.hpp",
        "React/Inspector/*.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "DevSupport_union_hdrs",
  srcs = [
    "DevSupport_hdrs",
    "React_hdrs",
    ":Core_hdrs",
    ":DevSupport_cxx_hdrs",
    ":RCTWebSocket_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "DevSupport_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":DevSupport_union_hdrs"
  ],
  deps = [
    ":Core_hmap",
    ":DevSupport_cxx_hmap",
    ":RCTWebSocket_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "DevSupport_includes",
  include = [
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "DevSupport",
  enable_modules = 0,
  srcs = glob(
    [
      "React/DevSupport/*.S",
      "React/DevSupport/*.c",
      "React/DevSupport/*.m",
      "React/DevSupport/*.s",
      "React/Inspector/*.S",
      "React/Inspector/*.c",
      "React/Inspector/*.m",
      "React/Inspector/*.s"
    ],
    exclude_directories = 1
  ),
  module_map = ":React_extended_module_map_module_map_file",
  hdrs = [
    ":DevSupport_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    ":Core",
    ":DevSupport_cxx",
    ":RCTWebSocket",
    ":DevSupport_includes"
  ],
  copts = select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "DevSupport_acknowledgement",
  deps = [],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "RCTFabric_cxx_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/Fabric/**/*.h"
      ],
      exclude = [
        "**/tests/*.h",
        "**/tests/*.hpp",
        "**/tests/*.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTFabric_cxx_public_hdrs",
  srcs = glob(
    [
      "React/Fabric/**/*.h"
    ],
    exclude_directories = 1
  ) + [
    ":Core_public_hdrs",
    ":fabric_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTFabric_cxx_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/Fabric/**/*.h"
      ],
      exclude = [
        "**/tests/*.h",
        "**/tests/*.hpp",
        "**/tests/*.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTFabric_cxx_union_hdrs",
  srcs = [
    "RCTFabric_cxx_hdrs",
    "React_hdrs",
    ":Core_hdrs",
    ":fabric_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "RCTFabric_cxx_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":RCTFabric_cxx_union_hdrs"
  ],
  deps = [
    "//Vendor/Folly:Folly",
    ":Core_hmap",
    ":fabric_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "RCTFabric_cxx_includes",
  include = [
    "Vendor/React/ReactCommon",
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "RCTFabric_cxx",
  enable_modules = 0,
  srcs = glob(
    [
      "React/Fabric/**/*.cpp",
      "React/Fabric/**/*.mm"
    ],
    exclude = [
      "**/tests/*.S",
      "**/tests/*.c",
      "**/tests/*.cc",
      "**/tests/*.cpp",
      "**/tests/*.cxx",
      "**/tests/*.m",
      "**/tests/*.mm",
      "**/tests/*.s"
    ] + glob(
      [
        "React/Fabric/**/*.S",
        "React/Fabric/**/*.c",
        "React/Fabric/**/*.m"
      ],
      exclude = [
        "**/tests/*.S",
        "**/tests/*.c",
        "**/tests/*.cc",
        "**/tests/*.cpp",
        "**/tests/*.cxx",
        "**/tests/*.m",
        "**/tests/*.mm",
        "**/tests/*.s"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  hdrs = [
    ":RCTFabric_cxx_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  sdk_frameworks = [
    "JavaScriptCore"
  ],
  deps = [
    "//Vendor/Folly:Folly",
    ":Core",
    ":fabric",
    ":RCTFabric_cxx_includes"
  ],
  copts = [
    "-std=c++14",
    "-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "RCTFabric_cxx_acknowledgement",
  deps = [
    "//Vendor/Folly:Folly_acknowledgement"
  ],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "RCTFabric_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/Fabric/**/*.h"
      ],
      exclude = [
        "**/tests/*.h",
        "**/tests/*.hpp",
        "**/tests/*.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTFabric_public_hdrs",
  srcs = glob(
    [
      "React/Fabric/**/*.h"
    ],
    exclude_directories = 1
  ) + [
    ":Core_public_hdrs",
    ":RCTFabric_cxx_public_hdrs",
    ":fabric_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTFabric_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/Fabric/**/*.h"
      ],
      exclude = [
        "**/tests/*.h",
        "**/tests/*.hpp",
        "**/tests/*.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTFabric_union_hdrs",
  srcs = [
    "RCTFabric_hdrs",
    "React_hdrs",
    ":Core_hdrs",
    ":RCTFabric_cxx_hdrs",
    ":fabric_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "RCTFabric_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":RCTFabric_union_hdrs"
  ],
  deps = [
    "//Vendor/Folly:Folly",
    ":Core_hmap",
    ":RCTFabric_cxx_hmap",
    ":fabric_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "RCTFabric_includes",
  include = [
    "Vendor/React/ReactCommon",
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "RCTFabric",
  enable_modules = 0,
  srcs = glob(
    [
      "React/Fabric/**/*.S",
      "React/Fabric/**/*.c",
      "React/Fabric/**/*.m"
    ],
    exclude = [
      "**/tests/*.S",
      "**/tests/*.c",
      "**/tests/*.cc",
      "**/tests/*.cpp",
      "**/tests/*.cxx",
      "**/tests/*.m",
      "**/tests/*.mm",
      "**/tests/*.s"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":RCTFabric_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  sdk_frameworks = [
    "JavaScriptCore"
  ],
  deps = [
    "//Vendor/Folly:Folly",
    ":Core",
    ":RCTFabric_cxx",
    ":fabric",
    ":RCTFabric_includes"
  ],
  copts = [
    "-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "RCTFabric_acknowledgement",
  deps = [
    "//Vendor/Folly:Folly_acknowledgement"
  ],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "tvOS_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/**/RCTTV*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "tvOS_public_hdrs",
  srcs = glob(
    [
      "React/**/RCTTV*.h"
    ],
    exclude_directories = 1
  ) + [
    ":Core_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "tvOS_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/**/RCTTV*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "tvOS_union_hdrs",
  srcs = [
    "tvOS_hdrs",
    "React_hdrs",
    ":Core_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "tvOS_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":tvOS_union_hdrs"
  ],
  deps = [
    ":Core_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "tvOS_includes",
  include = [
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "tvOS",
  enable_modules = 0,
  srcs = glob(
    [
      "React/**/RCTTV*.m"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":tvOS_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    ":Core",
    ":tvOS_includes"
  ],
  copts = select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "tvOS_acknowledgement",
  deps = [],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "jschelpers_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/jschelpers/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "jschelpers_public_hdrs",
  srcs = [
    ":PrivateDatabase_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "jschelpers_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/jschelpers/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "jschelpers_union_hdrs",
  srcs = [
    "jschelpers_hdrs",
    "React_hdrs",
    ":PrivateDatabase_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "jschelpers_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":jschelpers_union_hdrs"
  ],
  deps = [
    "//Vendor/Folly:Folly",
    ":PrivateDatabase_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "jschelpers_includes",
  include = [
    "Vendor/React/ReactCommon",
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "jschelpers",
  enable_modules = 0,
  srcs = glob(
    [
      "ReactCommon/jschelpers/*.cpp"
    ],
    exclude = glob(
      [
        "ReactCommon/cxxreact/*.cpp"
      ],
      exclude = [
        "ReactCommon/cxxreact/SampleCxxModule.S",
        "ReactCommon/cxxreact/SampleCxxModule.c",
        "ReactCommon/cxxreact/SampleCxxModule.cc",
        "ReactCommon/cxxreact/SampleCxxModule.cpp",
        "ReactCommon/cxxreact/SampleCxxModule.cxx",
        "ReactCommon/cxxreact/SampleCxxModule.m",
        "ReactCommon/cxxreact/SampleCxxModule.mm",
        "ReactCommon/cxxreact/SampleCxxModule.s"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/Cxx*/*.mm"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/Cxx*/*.m"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/Cxx*/*.m"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  hdrs = [
    ":jschelpers_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  sdk_frameworks = [
    "JavaScriptCore"
  ],
  deps = [
    "//Vendor/Folly:Folly",
    ":PrivateDatabase",
    ":jschelpers_includes"
  ],
  copts = [
    "-std=c++14",
    "-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "jschelpers_acknowledgement",
  deps = [
    "//Vendor/Folly:Folly_acknowledgement"
  ],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "jsinspector_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/jsinspector/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "jsinspector_public_hdrs",
  srcs = [],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "jsinspector_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/jsinspector/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "jsinspector_union_hdrs",
  srcs = [
    "jsinspector_hdrs",
    "React_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "jsinspector_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":jsinspector_union_hdrs"
  ],
  deps = [],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "jsinspector_includes",
  include = [
    "Vendor/React/ReactCommon",
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "jsinspector",
  enable_modules = 0,
  srcs = glob(
    [
      "ReactCommon/jsinspector/*.cpp"
    ],
    exclude = glob(
      [
        "ReactCommon/cxxreact/*.cpp"
      ],
      exclude = [
        "ReactCommon/cxxreact/SampleCxxModule.S",
        "ReactCommon/cxxreact/SampleCxxModule.c",
        "ReactCommon/cxxreact/SampleCxxModule.cc",
        "ReactCommon/cxxreact/SampleCxxModule.cpp",
        "ReactCommon/cxxreact/SampleCxxModule.cxx",
        "ReactCommon/cxxreact/SampleCxxModule.m",
        "ReactCommon/cxxreact/SampleCxxModule.mm",
        "ReactCommon/cxxreact/SampleCxxModule.s"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/Cxx*/*.mm"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/Cxx*/*.m"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/Cxx*/*.m"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  hdrs = [
    ":jsinspector_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    ":jsinspector_includes"
  ],
  copts = [
    "-std=c++14"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "jsinspector_acknowledgement",
  deps = [],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "PrivateDatabase_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/privatedata/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "PrivateDatabase_public_hdrs",
  srcs = [],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "PrivateDatabase_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/privatedata/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "PrivateDatabase_union_hdrs",
  srcs = [
    "PrivateDatabase_hdrs",
    "React_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "PrivateDatabase_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":PrivateDatabase_union_hdrs"
  ],
  deps = [],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "PrivateDatabase_includes",
  include = [
    "Vendor/React/ReactCommon",
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "PrivateDatabase",
  enable_modules = 0,
  srcs = glob(
    [
      "ReactCommon/privatedata/*.cpp"
    ],
    exclude = glob(
      [
        "ReactCommon/jschelpers/*.cpp"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/cxxreact/*.cpp"
      ],
      exclude = [
        "ReactCommon/cxxreact/SampleCxxModule.S",
        "ReactCommon/cxxreact/SampleCxxModule.c",
        "ReactCommon/cxxreact/SampleCxxModule.cc",
        "ReactCommon/cxxreact/SampleCxxModule.cpp",
        "ReactCommon/cxxreact/SampleCxxModule.cxx",
        "ReactCommon/cxxreact/SampleCxxModule.m",
        "ReactCommon/cxxreact/SampleCxxModule.mm",
        "ReactCommon/cxxreact/SampleCxxModule.s"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/Cxx*/*.mm"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/Cxx*/*.m"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/Cxx*/*.m"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  hdrs = [
    ":PrivateDatabase_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    ":PrivateDatabase_includes"
  ],
  copts = [
    "-std=c++14"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "PrivateDatabase_acknowledgement",
  deps = [],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "cxxreact_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/cxxreact/*.h"
      ],
      exclude = [
        "ReactCommon/cxxreact/SampleCxxModule.h",
        "ReactCommon/cxxreact/SampleCxxModule.hpp",
        "ReactCommon/cxxreact/SampleCxxModule.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "cxxreact_public_hdrs",
  srcs = [
    ":jschelpers_public_hdrs",
    ":jsinspector_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "cxxreact_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/cxxreact/*.h"
      ],
      exclude = [
        "ReactCommon/cxxreact/SampleCxxModule.h",
        "ReactCommon/cxxreact/SampleCxxModule.hpp",
        "ReactCommon/cxxreact/SampleCxxModule.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "cxxreact_union_hdrs",
  srcs = [
    "cxxreact_hdrs",
    "React_hdrs",
    ":jschelpers_hdrs",
    ":jsinspector_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "cxxreact_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":cxxreact_union_hdrs"
  ],
  deps = [
    "//Vendor/Folly:Folly",
    "//Vendor/boost-for-react-native:boost-for-react-native",
    ":jschelpers_hmap",
    ":jsinspector_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "cxxreact_includes",
  include = [
    "Vendor/React/ReactCommon",
    "Vendor/boost-for-react-native",
    "Vendor/DoubleConversion",
    "Vendor/Folly",
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "cxxreact",
  enable_modules = 0,
  srcs = glob(
    [
      "ReactCommon/cxxreact/*.cpp"
    ],
    exclude = [
      "ReactCommon/cxxreact/SampleCxxModule.S",
      "ReactCommon/cxxreact/SampleCxxModule.c",
      "ReactCommon/cxxreact/SampleCxxModule.cc",
      "ReactCommon/cxxreact/SampleCxxModule.cpp",
      "ReactCommon/cxxreact/SampleCxxModule.cxx",
      "ReactCommon/cxxreact/SampleCxxModule.m",
      "ReactCommon/cxxreact/SampleCxxModule.mm",
      "ReactCommon/cxxreact/SampleCxxModule.s"
    ] + glob(
      [
        "React/Cxx*/*.mm"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/Cxx*/*.m"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/Cxx*/*.m"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  hdrs = [
    ":cxxreact_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    "//Vendor/Folly:Folly",
    "//Vendor/boost-for-react-native:boost-for-react-native",
    ":jschelpers",
    ":jsinspector",
    ":cxxreact_includes"
  ],
  copts = [
    "-std=c++14",
    "-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "cxxreact_acknowledgement",
  deps = [
    "//Vendor/Folly:Folly_acknowledgement",
    "//Vendor/boost-for-react-native:boost-for-react-native_acknowledgement"
  ],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "fabric_direct_hdrs",
  srcs = glob(
    [
      "pod_support/Headers/Public/**/*"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_public_hdrs",
  srcs = [],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_hdrs",
  srcs = glob(
    [
      "pod_support/Headers/Public/**/*"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_union_hdrs",
  srcs = [
    "fabric_hdrs",
    "React_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "fabric_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":fabric_union_hdrs"
  ],
  deps = [],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "fabric_includes",
  include = [
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "fabric",
  enable_modules = 0,
  hdrs = [
    ":fabric_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    ":fabric_includes"
  ],
  copts = select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "fabric_acknowledgement",
  deps = [],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "fabric_activityindicator_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/fabric/activityindicator/**/*.h"
      ],
      exclude = [
        "**/tests/*.h",
        "**/tests/*.hpp",
        "**/tests/*.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_activityindicator_public_hdrs",
  srcs = glob(
    [
      "ReactCommon/fabric/activityindicator/**/*.h"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_activityindicator_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/fabric/activityindicator/**/*.h"
      ],
      exclude = [
        "**/tests/*.h",
        "**/tests/*.hpp",
        "**/tests/*.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_activityindicator_union_hdrs",
  srcs = [
    "fabric_activityindicator_hdrs",
    "React_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "fabric_activityindicator_hmap",
  namespace = "fabric/activityindicator",
  hdrs = [
    "React_package_hdrs",
    ":fabric_activityindicator_union_hdrs"
  ],
  deps = [
    "//Vendor/Folly:Folly"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "fabric_activityindicator_includes",
  include = [
    "Vendor/React/ReactCommon",
    "Vendor/Folly",
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "fabric_activityindicator",
  enable_modules = 0,
  srcs = glob(
    [
      "ReactCommon/fabric/activityindicator/**/*.cpp"
    ],
    exclude = [
      "**/tests/*.S",
      "**/tests/*.c",
      "**/tests/*.cc",
      "**/tests/*.cpp",
      "**/tests/*.cxx",
      "**/tests/*.m",
      "**/tests/*.mm",
      "**/tests/*.s"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":fabric_activityindicator_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    "//Vendor/Folly:Folly",
    ":fabric_activityindicator_includes"
  ],
  copts = [
    "-std=c++14",
    "-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/fabric/activityindicator/"
  ] + [
    "-fmodule-name=fabric/activityindicator"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "fabric_activityindicator_acknowledgement",
  deps = [
    "//Vendor/Folly:Folly_acknowledgement"
  ],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "fabric_attributedstring_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/fabric/attributedstring/**/*.h"
      ],
      exclude = [
        "**/tests/*.h",
        "**/tests/*.hpp",
        "**/tests/*.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_attributedstring_public_hdrs",
  srcs = glob(
    [
      "ReactCommon/fabric/attributedstring/**/*.h"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_attributedstring_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/fabric/attributedstring/**/*.h"
      ],
      exclude = [
        "**/tests/*.h",
        "**/tests/*.hpp",
        "**/tests/*.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_attributedstring_union_hdrs",
  srcs = [
    "fabric_attributedstring_hdrs",
    "React_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "fabric_attributedstring_hmap",
  namespace = "fabric/attributedstring",
  hdrs = [
    "React_package_hdrs",
    ":fabric_attributedstring_union_hdrs"
  ],
  deps = [
    "//Vendor/Folly:Folly"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "fabric_attributedstring_includes",
  include = [
    "Vendor/React/ReactCommon",
    "Vendor/Folly",
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "fabric_attributedstring",
  enable_modules = 0,
  srcs = glob(
    [
      "ReactCommon/fabric/attributedstring/**/*.cpp"
    ],
    exclude = [
      "**/tests/*.S",
      "**/tests/*.c",
      "**/tests/*.cc",
      "**/tests/*.cpp",
      "**/tests/*.cxx",
      "**/tests/*.m",
      "**/tests/*.mm",
      "**/tests/*.s"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":fabric_attributedstring_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    "//Vendor/Folly:Folly",
    ":fabric_attributedstring_includes"
  ],
  copts = [
    "-std=c++14",
    "-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/fabric/attributedstring/"
  ] + [
    "-fmodule-name=fabric/attributedstring"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "fabric_attributedstring_acknowledgement",
  deps = [
    "//Vendor/Folly:Folly_acknowledgement"
  ],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "fabric_core_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/fabric/core/**/*.h"
      ],
      exclude = [
        "**/tests/*.h",
        "**/tests/*.hpp",
        "**/tests/*.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_core_public_hdrs",
  srcs = glob(
    [
      "ReactCommon/fabric/core/**/*.h"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_core_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/fabric/core/**/*.h"
      ],
      exclude = [
        "**/tests/*.h",
        "**/tests/*.hpp",
        "**/tests/*.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_core_union_hdrs",
  srcs = [
    "fabric_core_hdrs",
    "React_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "fabric_core_hmap",
  namespace = "fabric/core",
  hdrs = [
    "React_package_hdrs",
    ":fabric_core_union_hdrs"
  ],
  deps = [
    "//Vendor/Folly:Folly"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "fabric_core_includes",
  include = [
    "Vendor/React/ReactCommon",
    "Vendor/Folly",
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "fabric_core",
  enable_modules = 0,
  srcs = glob(
    [
      "ReactCommon/fabric/core/**/*.cpp"
    ],
    exclude = [
      "**/tests/*.S",
      "**/tests/*.c",
      "**/tests/*.cc",
      "**/tests/*.cpp",
      "**/tests/*.cxx",
      "**/tests/*.m",
      "**/tests/*.mm",
      "**/tests/*.s"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":fabric_core_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    "//Vendor/Folly:Folly",
    ":fabric_core_includes"
  ],
  copts = [
    "-std=c++14",
    "-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/fabric/core/"
  ] + [
    "-fmodule-name=fabric/core"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "fabric_core_acknowledgement",
  deps = [
    "//Vendor/Folly:Folly_acknowledgement"
  ],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "fabric_debug_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/fabric/debug/**/*.h"
      ],
      exclude = [
        "**/tests/*.h",
        "**/tests/*.hpp",
        "**/tests/*.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_debug_public_hdrs",
  srcs = glob(
    [
      "ReactCommon/fabric/debug/**/*.h"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_debug_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/fabric/debug/**/*.h"
      ],
      exclude = [
        "**/tests/*.h",
        "**/tests/*.hpp",
        "**/tests/*.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_debug_union_hdrs",
  srcs = [
    "fabric_debug_hdrs",
    "React_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "fabric_debug_hmap",
  namespace = "fabric/debug",
  hdrs = [
    "React_package_hdrs",
    ":fabric_debug_union_hdrs"
  ],
  deps = [
    "//Vendor/Folly:Folly"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "fabric_debug_includes",
  include = [
    "Vendor/React/ReactCommon",
    "Vendor/Folly",
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "fabric_debug",
  enable_modules = 0,
  srcs = glob(
    [
      "ReactCommon/fabric/debug/**/*.cpp"
    ],
    exclude = [
      "**/tests/*.S",
      "**/tests/*.c",
      "**/tests/*.cc",
      "**/tests/*.cpp",
      "**/tests/*.cxx",
      "**/tests/*.m",
      "**/tests/*.mm",
      "**/tests/*.s"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":fabric_debug_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    "//Vendor/Folly:Folly",
    ":fabric_debug_includes"
  ],
  copts = [
    "-std=c++14",
    "-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/fabric/debug/"
  ] + [
    "-fmodule-name=fabric/debug"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "fabric_debug_acknowledgement",
  deps = [
    "//Vendor/Folly:Folly_acknowledgement"
  ],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "fabric_graphics_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/fabric/graphics/**/*.h"
      ],
      exclude = [
        "**/tests/*.h",
        "**/tests/*.hpp",
        "**/tests/*.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_graphics_public_hdrs",
  srcs = glob(
    [
      "ReactCommon/fabric/graphics/**/*.h"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_graphics_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/fabric/graphics/**/*.h"
      ],
      exclude = [
        "**/tests/*.h",
        "**/tests/*.hpp",
        "**/tests/*.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_graphics_union_hdrs",
  srcs = [
    "fabric_graphics_hdrs",
    "React_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "fabric_graphics_hmap",
  namespace = "fabric/graphics",
  hdrs = [
    "React_package_hdrs",
    ":fabric_graphics_union_hdrs"
  ],
  deps = [
    "//Vendor/Folly:Folly"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "fabric_graphics_includes",
  include = [
    "Vendor/React/ReactCommon",
    "Vendor/Folly",
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "fabric_graphics",
  enable_modules = 0,
  srcs = glob(
    [
      "ReactCommon/fabric/graphics/**/*.cpp"
    ],
    exclude = [
      "**/tests/*.S",
      "**/tests/*.c",
      "**/tests/*.cc",
      "**/tests/*.cpp",
      "**/tests/*.cxx",
      "**/tests/*.m",
      "**/tests/*.mm",
      "**/tests/*.s"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":fabric_graphics_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    "//Vendor/Folly:Folly",
    ":fabric_graphics_includes"
  ],
  copts = [
    "-std=c++14",
    "-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/fabric/graphics/"
  ] + [
    "-fmodule-name=fabric/graphics"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "fabric_graphics_acknowledgement",
  deps = [
    "//Vendor/Folly:Folly_acknowledgement"
  ],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "fabric_scrollview_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/fabric/scrollview/**/*.h"
      ],
      exclude = [
        "**/tests/*.h",
        "**/tests/*.hpp",
        "**/tests/*.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_scrollview_public_hdrs",
  srcs = glob(
    [
      "ReactCommon/fabric/scrollview/**/*.h"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_scrollview_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/fabric/scrollview/**/*.h"
      ],
      exclude = [
        "**/tests/*.h",
        "**/tests/*.hpp",
        "**/tests/*.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_scrollview_union_hdrs",
  srcs = [
    "fabric_scrollview_hdrs",
    "React_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "fabric_scrollview_hmap",
  namespace = "fabric/scrollview",
  hdrs = [
    "React_package_hdrs",
    ":fabric_scrollview_union_hdrs"
  ],
  deps = [
    "//Vendor/Folly:Folly"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "fabric_scrollview_includes",
  include = [
    "Vendor/React/ReactCommon",
    "Vendor/Folly",
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "fabric_scrollview",
  enable_modules = 0,
  srcs = glob(
    [
      "ReactCommon/fabric/scrollview/**/*.cpp"
    ],
    exclude = [
      "**/tests/*.S",
      "**/tests/*.c",
      "**/tests/*.cc",
      "**/tests/*.cpp",
      "**/tests/*.cxx",
      "**/tests/*.m",
      "**/tests/*.mm",
      "**/tests/*.s"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":fabric_scrollview_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    "//Vendor/Folly:Folly",
    ":fabric_scrollview_includes"
  ],
  copts = [
    "-std=c++14",
    "-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/fabric/scrollview/"
  ] + [
    "-fmodule-name=fabric/scrollview"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "fabric_scrollview_acknowledgement",
  deps = [
    "//Vendor/Folly:Folly_acknowledgement"
  ],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "fabric_text_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/fabric/text/**/*.h"
      ],
      exclude = [
        "**/tests/*.h",
        "**/tests/*.hpp",
        "**/tests/*.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_text_public_hdrs",
  srcs = glob(
    [
      "ReactCommon/fabric/text/**/*.h"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_text_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/fabric/text/**/*.h"
      ],
      exclude = [
        "**/tests/*.h",
        "**/tests/*.hpp",
        "**/tests/*.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_text_union_hdrs",
  srcs = [
    "fabric_text_hdrs",
    "React_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "fabric_text_hmap",
  namespace = "fabric/text",
  hdrs = [
    "React_package_hdrs",
    ":fabric_text_union_hdrs"
  ],
  deps = [
    "//Vendor/Folly:Folly"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "fabric_text_includes",
  include = [
    "Vendor/React/ReactCommon",
    "Vendor/Folly",
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "fabric_text",
  enable_modules = 0,
  srcs = glob(
    [
      "ReactCommon/fabric/text/**/*.cpp"
    ],
    exclude = [
      "**/tests/*.S",
      "**/tests/*.c",
      "**/tests/*.cc",
      "**/tests/*.cpp",
      "**/tests/*.cxx",
      "**/tests/*.m",
      "**/tests/*.mm",
      "**/tests/*.s"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":fabric_text_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    "//Vendor/Folly:Folly",
    ":fabric_text_includes"
  ],
  copts = [
    "-std=c++14",
    "-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/fabric/text/"
  ] + [
    "-fmodule-name=fabric/text"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "fabric_text_acknowledgement",
  deps = [
    "//Vendor/Folly:Folly_acknowledgement"
  ],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "fabric_textlayoutmanager_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/fabric/textlayoutmanager/**/*.h"
      ],
      exclude = [
        "**/tests/*.h",
        "**/tests/*.hpp",
        "**/tests/*.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_textlayoutmanager_public_hdrs",
  srcs = glob(
    [
      "ReactCommon/fabric/textlayoutmanager/**/*.h"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_textlayoutmanager_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/fabric/textlayoutmanager/**/*.h"
      ],
      exclude = [
        "**/tests/*.h",
        "**/tests/*.hpp",
        "**/tests/*.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_textlayoutmanager_union_hdrs",
  srcs = [
    "fabric_textlayoutmanager_hdrs",
    "React_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "fabric_textlayoutmanager_hmap",
  namespace = "fabric/textlayoutmanager",
  hdrs = [
    "React_package_hdrs",
    ":fabric_textlayoutmanager_union_hdrs"
  ],
  deps = [
    "//Vendor/Folly:Folly"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "fabric_textlayoutmanager_includes",
  include = [
    "Vendor/React/ReactCommon",
    "Vendor/Folly",
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "fabric_textlayoutmanager",
  enable_modules = 0,
  srcs = glob(
    [
      "ReactCommon/fabric/textlayoutmanager/**/*.cpp",
      "ReactCommon/fabric/textlayoutmanager/**/*.mm"
    ],
    exclude = [
      "**/tests/*.S",
      "**/tests/*.c",
      "**/tests/*.cc",
      "**/tests/*.cpp",
      "**/tests/*.cxx",
      "**/tests/*.m",
      "**/tests/*.mm",
      "**/tests/*.s"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":fabric_textlayoutmanager_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    "//Vendor/Folly:Folly",
    ":fabric_textlayoutmanager_includes"
  ],
  copts = [
    "-std=c++14",
    "-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/fabric/textlayoutmanager/"
  ] + [
    "-fmodule-name=fabric/textlayoutmanager"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "fabric_textlayoutmanager_acknowledgement",
  deps = [
    "//Vendor/Folly:Folly_acknowledgement"
  ],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "fabric_uimanager_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/fabric/uimanager/**/*.h"
      ],
      exclude = [
        "**/tests/*.h",
        "**/tests/*.hpp",
        "**/tests/*.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_uimanager_public_hdrs",
  srcs = glob(
    [
      "ReactCommon/fabric/uimanager/**/*.h"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_uimanager_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/fabric/uimanager/**/*.h"
      ],
      exclude = [
        "**/tests/*.h",
        "**/tests/*.hpp",
        "**/tests/*.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_uimanager_union_hdrs",
  srcs = [
    "fabric_uimanager_hdrs",
    "React_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "fabric_uimanager_hmap",
  namespace = "fabric/uimanager",
  hdrs = [
    "React_package_hdrs",
    ":fabric_uimanager_union_hdrs"
  ],
  deps = [
    "//Vendor/Folly:Folly"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "fabric_uimanager_includes",
  include = [
    "Vendor/React/ReactCommon",
    "Vendor/Folly",
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "fabric_uimanager",
  enable_modules = 0,
  srcs = glob(
    [
      "ReactCommon/fabric/uimanager/**/*.cpp"
    ],
    exclude = [
      "**/tests/*.S",
      "**/tests/*.c",
      "**/tests/*.cc",
      "**/tests/*.cpp",
      "**/tests/*.cxx",
      "**/tests/*.m",
      "**/tests/*.mm",
      "**/tests/*.s"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":fabric_uimanager_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    "//Vendor/Folly:Folly",
    ":fabric_uimanager_includes"
  ],
  copts = [
    "-std=c++14",
    "-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/fabric/uimanager/"
  ] + [
    "-fmodule-name=fabric/uimanager"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "fabric_uimanager_acknowledgement",
  deps = [
    "//Vendor/Folly:Folly_acknowledgement"
  ],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "fabric_view_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/fabric/view/**/*.h"
      ],
      exclude = [
        "**/tests/*.h",
        "**/tests/*.hpp",
        "**/tests/*.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_view_public_hdrs",
  srcs = glob(
    [
      "ReactCommon/fabric/view/**/*.h"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_view_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/fabric/view/**/*.h"
      ],
      exclude = [
        "**/tests/*.h",
        "**/tests/*.hpp",
        "**/tests/*.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fabric_view_union_hdrs",
  srcs = [
    "fabric_view_hdrs",
    "React_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "fabric_view_hmap",
  namespace = "fabric/view",
  hdrs = [
    "React_package_hdrs",
    ":fabric_view_union_hdrs"
  ],
  deps = [
    "//Vendor/Folly:Folly",
    "//Vendor/Yoga:Yoga"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "fabric_view_includes",
  include = [
    "Vendor/React/ReactCommon",
    "Vendor/Folly",
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "fabric_view",
  enable_modules = 0,
  srcs = glob(
    [
      "ReactCommon/fabric/view/**/*.cpp"
    ],
    exclude = [
      "**/tests/*.S",
      "**/tests/*.c",
      "**/tests/*.cc",
      "**/tests/*.cpp",
      "**/tests/*.cxx",
      "**/tests/*.m",
      "**/tests/*.mm",
      "**/tests/*.s"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":fabric_view_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    "//Vendor/Folly:Folly",
    "//Vendor/Yoga:Yoga",
    ":fabric_view_includes"
  ],
  copts = [
    "-std=c++14",
    "-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/fabric/view/"
  ] + [
    "-fmodule-name=fabric/view"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "fabric_view_acknowledgement",
  deps = [
    "//Vendor/Folly:Folly_acknowledgement",
    "//Vendor/Yoga:Yoga_acknowledgement"
  ],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "RCTFabricSample_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/fabric/sample/**/*.h"
      ],
      exclude = [
        "**/tests/*.h",
        "**/tests/*.hpp",
        "**/tests/*.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTFabricSample_public_hdrs",
  srcs = glob(
    [
      "ReactCommon/fabric/sample/**/*.h"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTFabricSample_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "ReactCommon/fabric/sample/**/*.h"
      ],
      exclude = [
        "**/tests/*.h",
        "**/tests/*.hpp",
        "**/tests/*.hxx"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTFabricSample_union_hdrs",
  srcs = [
    "RCTFabricSample_hdrs",
    "React_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "RCTFabricSample_hmap",
  namespace = "fabric/sample",
  hdrs = [
    "React_package_hdrs",
    ":RCTFabricSample_union_hdrs"
  ],
  deps = [
    "//Vendor/Folly:Folly"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "RCTFabricSample_includes",
  include = [
    "Vendor/React/ReactCommon",
    "Vendor/Folly",
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "RCTFabricSample",
  enable_modules = 0,
  srcs = glob(
    [
      "ReactCommon/fabric/sample/**/*.cpp"
    ],
    exclude = [
      "**/tests/*.S",
      "**/tests/*.c",
      "**/tests/*.cc",
      "**/tests/*.cpp",
      "**/tests/*.cxx",
      "**/tests/*.m",
      "**/tests/*.mm",
      "**/tests/*.s"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":RCTFabricSample_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    "//Vendor/Folly:Folly",
    ":RCTFabricSample_includes"
  ],
  copts = [
    "-std=c++14",
    "-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/fabric/sample/"
  ] + [
    "-fmodule-name=fabric/sample"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "RCTFabricSample_acknowledgement",
  deps = [
    "//Vendor/Folly:Folly_acknowledgement"
  ],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "ART_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/ART/**/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "ART_public_hdrs",
  srcs = glob(
    [
      "Libraries/ART/**/*.h"
    ],
    exclude_directories = 1
  ) + [
    ":Core_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "ART_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/ART/**/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "ART_union_hdrs",
  srcs = [
    "ART_hdrs",
    "React_hdrs",
    ":Core_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "ART_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":ART_union_hdrs"
  ],
  deps = [
    ":Core_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "ART_includes",
  include = [
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "ART",
  enable_modules = 0,
  srcs = glob(
    [
      "Libraries/ART/**/*.m"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":ART_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    ":Core",
    ":ART_includes"
  ],
  copts = select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "ART_acknowledgement",
  deps = [],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "RCTActionSheet_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/ActionSheetIOS/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTActionSheet_public_hdrs",
  srcs = glob(
    [
      "Libraries/ActionSheetIOS/*.h"
    ],
    exclude_directories = 1
  ) + [
    ":Core_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTActionSheet_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/ActionSheetIOS/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTActionSheet_union_hdrs",
  srcs = [
    "RCTActionSheet_hdrs",
    "React_hdrs",
    ":Core_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "RCTActionSheet_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":RCTActionSheet_union_hdrs"
  ],
  deps = [
    ":Core_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "RCTActionSheet_includes",
  include = [
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "RCTActionSheet",
  enable_modules = 0,
  srcs = glob(
    [
      "Libraries/ActionSheetIOS/*.m"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":RCTActionSheet_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    ":Core",
    ":RCTActionSheet_includes"
  ],
  copts = select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "RCTActionSheet_acknowledgement",
  deps = [],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "RCTAnimation_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/NativeAnimation/*.h",
        "Libraries/NativeAnimation/Drivers/*.h",
        "Libraries/NativeAnimation/Nodes/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTAnimation_public_hdrs",
  srcs = glob(
    [
      "Libraries/NativeAnimation/*.h",
      "Libraries/NativeAnimation/Drivers/*.h",
      "Libraries/NativeAnimation/Nodes/*.h"
    ],
    exclude_directories = 1
  ) + [
    ":Core_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTAnimation_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/NativeAnimation/*.h",
        "Libraries/NativeAnimation/Drivers/*.h",
        "Libraries/NativeAnimation/Nodes/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTAnimation_union_hdrs",
  srcs = [
    "RCTAnimation_hdrs",
    "React_hdrs",
    ":Core_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "RCTAnimation_hmap",
  namespace = "RCTAnimation",
  hdrs = [
    "React_package_hdrs",
    ":RCTAnimation_union_hdrs"
  ],
  deps = [
    ":Core_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "RCTAnimation_includes",
  include = [
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "RCTAnimation",
  enable_modules = 0,
  srcs = glob(
    [
      "Libraries/NativeAnimation/*.m",
      "Libraries/NativeAnimation/Drivers/*.m",
      "Libraries/NativeAnimation/Nodes/*.m"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":RCTAnimation_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    ":Core",
    ":RCTAnimation_includes"
  ],
  copts = select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/RCTAnimation/"
  ] + [
    "-fmodule-name=RCTAnimation"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "RCTAnimation_acknowledgement",
  deps = [],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "RCTBlob_cxx_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/Blob/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTBlob_cxx_public_hdrs",
  srcs = glob(
    [
      "Libraries/Blob/*.h"
    ],
    exclude_directories = 1
  ) + [
    ":Core_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTBlob_cxx_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/Blob/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTBlob_cxx_union_hdrs",
  srcs = [
    "RCTBlob_cxx_hdrs",
    "React_hdrs",
    ":Core_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "RCTBlob_cxx_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":RCTBlob_cxx_union_hdrs"
  ],
  deps = [
    ":Core_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "RCTBlob_cxx_includes",
  include = [
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "RCTBlob_cxx",
  enable_modules = 0,
  srcs = glob(
    [
      "Libraries/Blob/*.mm"
    ],
    exclude = glob(
      [
        "Libraries/Blob/*.m"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/WebSocket/*.m"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/DevSupport/*.cc",
        "React/DevSupport/*.cpp",
        "React/DevSupport/*.cxx",
        "React/DevSupport/*.mm",
        "React/Inspector/*.cc",
        "React/Inspector/*.cpp",
        "React/Inspector/*.cxx",
        "React/Inspector/*.mm"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/DevSupport/*.S",
        "React/DevSupport/*.c",
        "React/DevSupport/*.m",
        "React/DevSupport/*.s",
        "React/Inspector/*.S",
        "React/Inspector/*.c",
        "React/Inspector/*.m",
        "React/Inspector/*.s"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/DevSupport/*.S",
        "React/DevSupport/*.c",
        "React/DevSupport/*.m",
        "React/DevSupport/*.s",
        "React/Inspector/*.S",
        "React/Inspector/*.c",
        "React/Inspector/*.m",
        "React/Inspector/*.s"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  hdrs = [
    ":RCTBlob_cxx_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    ":Core",
    ":RCTBlob_cxx_includes"
  ],
  copts = [
    "-std=c++14",
    "-std=c++14"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "RCTBlob_cxx_acknowledgement",
  deps = [],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "RCTBlob_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/Blob/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTBlob_public_hdrs",
  srcs = glob(
    [
      "Libraries/Blob/*.h"
    ],
    exclude_directories = 1
  ) + [
    ":Core_public_hdrs",
    ":RCTBlob_cxx_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTBlob_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/Blob/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTBlob_union_hdrs",
  srcs = [
    "RCTBlob_hdrs",
    "React_hdrs",
    ":Core_hdrs",
    ":RCTBlob_cxx_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "RCTBlob_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":RCTBlob_union_hdrs"
  ],
  deps = [
    ":Core_hmap",
    ":RCTBlob_cxx_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "RCTBlob_includes",
  include = [
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "RCTBlob",
  enable_modules = 0,
  srcs = glob(
    [
      "Libraries/Blob/*.m"
    ],
    exclude = glob(
      [
        "Libraries/WebSocket/*.m"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/DevSupport/*.cc",
        "React/DevSupport/*.cpp",
        "React/DevSupport/*.cxx",
        "React/DevSupport/*.mm",
        "React/Inspector/*.cc",
        "React/Inspector/*.cpp",
        "React/Inspector/*.cxx",
        "React/Inspector/*.mm"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/DevSupport/*.S",
        "React/DevSupport/*.c",
        "React/DevSupport/*.m",
        "React/DevSupport/*.s",
        "React/Inspector/*.S",
        "React/Inspector/*.c",
        "React/Inspector/*.m",
        "React/Inspector/*.s"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/DevSupport/*.S",
        "React/DevSupport/*.c",
        "React/DevSupport/*.m",
        "React/DevSupport/*.s",
        "React/Inspector/*.S",
        "React/Inspector/*.c",
        "React/Inspector/*.m",
        "React/Inspector/*.s"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  hdrs = [
    ":RCTBlob_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    ":Core",
    ":RCTBlob_cxx",
    ":RCTBlob_includes"
  ],
  copts = select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "RCTBlob_acknowledgement",
  deps = [],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "RCTCameraRoll_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/CameraRoll/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTCameraRoll_public_hdrs",
  srcs = glob(
    [
      "Libraries/CameraRoll/*.h"
    ],
    exclude_directories = 1
  ) + [
    ":Core_public_hdrs",
    ":RCTImage_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTCameraRoll_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/CameraRoll/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTCameraRoll_union_hdrs",
  srcs = [
    "RCTCameraRoll_hdrs",
    "React_hdrs",
    ":Core_hdrs",
    ":RCTImage_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "RCTCameraRoll_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":RCTCameraRoll_union_hdrs"
  ],
  deps = [
    ":Core_hmap",
    ":RCTImage_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "RCTCameraRoll_includes",
  include = [
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "RCTCameraRoll",
  enable_modules = 0,
  srcs = glob(
    [
      "Libraries/CameraRoll/*.m"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":RCTCameraRoll_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    ":Core",
    ":RCTImage",
    ":RCTCameraRoll_includes"
  ],
  copts = select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "RCTCameraRoll_acknowledgement",
  deps = [],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "RCTGeolocation_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/Geolocation/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTGeolocation_public_hdrs",
  srcs = glob(
    [
      "Libraries/Geolocation/*.h"
    ],
    exclude_directories = 1
  ) + [
    ":Core_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTGeolocation_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/Geolocation/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTGeolocation_union_hdrs",
  srcs = [
    "RCTGeolocation_hdrs",
    "React_hdrs",
    ":Core_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "RCTGeolocation_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":RCTGeolocation_union_hdrs"
  ],
  deps = [
    ":Core_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "RCTGeolocation_includes",
  include = [
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "RCTGeolocation",
  enable_modules = 0,
  srcs = glob(
    [
      "Libraries/Geolocation/*.m"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":RCTGeolocation_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    ":Core",
    ":RCTGeolocation_includes"
  ],
  copts = select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "RCTGeolocation_acknowledgement",
  deps = [],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "RCTImage_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/Image/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTImage_public_hdrs",
  srcs = glob(
    [
      "Libraries/Image/*.h"
    ],
    exclude_directories = 1
  ) + [
    ":Core_public_hdrs",
    ":RCTNetwork_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTImage_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/Image/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTImage_union_hdrs",
  srcs = [
    "RCTImage_hdrs",
    "React_hdrs",
    ":Core_hdrs",
    ":RCTNetwork_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "RCTImage_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":RCTImage_union_hdrs"
  ],
  deps = [
    ":Core_hmap",
    ":RCTNetwork_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "RCTImage_includes",
  include = [
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "RCTImage",
  enable_modules = 0,
  srcs = glob(
    [
      "Libraries/Image/*.m"
    ],
    exclude = glob(
      [
        "Libraries/CameraRoll/*.m"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  hdrs = [
    ":RCTImage_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    ":Core",
    ":RCTNetwork",
    ":RCTImage_includes"
  ],
  copts = select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "RCTImage_acknowledgement",
  deps = [],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "RCTNetwork_cxx_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/Network/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTNetwork_cxx_public_hdrs",
  srcs = glob(
    [
      "Libraries/Network/*.h"
    ],
    exclude_directories = 1
  ) + [
    ":Core_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTNetwork_cxx_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/Network/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTNetwork_cxx_union_hdrs",
  srcs = [
    "RCTNetwork_cxx_hdrs",
    "React_hdrs",
    ":Core_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "RCTNetwork_cxx_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":RCTNetwork_cxx_union_hdrs"
  ],
  deps = [
    ":Core_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "RCTNetwork_cxx_includes",
  include = [
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "RCTNetwork_cxx",
  enable_modules = 0,
  srcs = glob(
    [
      "Libraries/Network/*.mm"
    ],
    exclude = glob(
      [
        "Libraries/Network/*.m"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/Image/*.m"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/CameraRoll/*.m"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  hdrs = [
    ":RCTNetwork_cxx_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    ":Core",
    ":RCTNetwork_cxx_includes"
  ],
  copts = [
    "-std=c++14",
    "-std=c++14"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "RCTNetwork_cxx_acknowledgement",
  deps = [],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "RCTNetwork_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/Network/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTNetwork_public_hdrs",
  srcs = glob(
    [
      "Libraries/Network/*.h"
    ],
    exclude_directories = 1
  ) + [
    ":Core_public_hdrs",
    ":RCTNetwork_cxx_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTNetwork_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/Network/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTNetwork_union_hdrs",
  srcs = [
    "RCTNetwork_hdrs",
    "React_hdrs",
    ":Core_hdrs",
    ":RCTNetwork_cxx_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "RCTNetwork_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":RCTNetwork_union_hdrs"
  ],
  deps = [
    ":Core_hmap",
    ":RCTNetwork_cxx_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "RCTNetwork_includes",
  include = [
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "RCTNetwork",
  enable_modules = 0,
  srcs = glob(
    [
      "Libraries/Network/*.m"
    ],
    exclude = glob(
      [
        "Libraries/Image/*.m"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/CameraRoll/*.m"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  hdrs = [
    ":RCTNetwork_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    ":Core",
    ":RCTNetwork_cxx",
    ":RCTNetwork_includes"
  ],
  copts = select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "RCTNetwork_acknowledgement",
  deps = [],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "RCTPushNotification_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/PushNotificationIOS/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTPushNotification_public_hdrs",
  srcs = glob(
    [
      "Libraries/PushNotificationIOS/*.h"
    ],
    exclude_directories = 1
  ) + [
    ":Core_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTPushNotification_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/PushNotificationIOS/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTPushNotification_union_hdrs",
  srcs = [
    "RCTPushNotification_hdrs",
    "React_hdrs",
    ":Core_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "RCTPushNotification_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":RCTPushNotification_union_hdrs"
  ],
  deps = [
    ":Core_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "RCTPushNotification_includes",
  include = [
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "RCTPushNotification",
  enable_modules = 0,
  srcs = glob(
    [
      "Libraries/PushNotificationIOS/*.m"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":RCTPushNotification_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    ":Core",
    ":RCTPushNotification_includes"
  ],
  copts = select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "RCTPushNotification_acknowledgement",
  deps = [],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "RCTSettings_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/Settings/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTSettings_public_hdrs",
  srcs = glob(
    [
      "Libraries/Settings/*.h"
    ],
    exclude_directories = 1
  ) + [
    ":Core_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTSettings_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/Settings/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTSettings_union_hdrs",
  srcs = [
    "RCTSettings_hdrs",
    "React_hdrs",
    ":Core_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "RCTSettings_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":RCTSettings_union_hdrs"
  ],
  deps = [
    ":Core_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "RCTSettings_includes",
  include = [
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "RCTSettings",
  enable_modules = 0,
  srcs = glob(
    [
      "Libraries/Settings/*.m"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":RCTSettings_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    ":Core",
    ":RCTSettings_includes"
  ],
  copts = select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "RCTSettings_acknowledgement",
  deps = [],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "RCTText_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/Text/**/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTText_public_hdrs",
  srcs = glob(
    [
      "Libraries/Text/**/*.h"
    ],
    exclude_directories = 1
  ) + [
    ":Core_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTText_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/Text/**/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTText_union_hdrs",
  srcs = [
    "RCTText_hdrs",
    "React_hdrs",
    ":Core_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "RCTText_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":RCTText_union_hdrs"
  ],
  deps = [
    ":Core_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "RCTText_includes",
  include = [
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "RCTText",
  enable_modules = 0,
  srcs = glob(
    [
      "Libraries/Text/**/*.m"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":RCTText_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    ":Core",
    ":RCTText_includes"
  ],
  copts = select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "RCTText_acknowledgement",
  deps = [],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "RCTVibration_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/Vibration/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTVibration_public_hdrs",
  srcs = glob(
    [
      "Libraries/Vibration/*.h"
    ],
    exclude_directories = 1
  ) + [
    ":Core_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTVibration_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/Vibration/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTVibration_union_hdrs",
  srcs = [
    "RCTVibration_hdrs",
    "React_hdrs",
    ":Core_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "RCTVibration_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":RCTVibration_union_hdrs"
  ],
  deps = [
    ":Core_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "RCTVibration_includes",
  include = [
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "RCTVibration",
  enable_modules = 0,
  srcs = glob(
    [
      "Libraries/Vibration/*.m"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":RCTVibration_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    ":Core",
    ":RCTVibration_includes"
  ],
  copts = select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "RCTVibration_acknowledgement",
  deps = [],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "RCTWebSocket_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/WebSocket/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTWebSocket_public_hdrs",
  srcs = glob(
    [
      "Libraries/WebSocket/*.h"
    ],
    exclude_directories = 1
  ) + [
    ":Core_public_hdrs",
    ":RCTBlob_public_hdrs",
    ":fishhook_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTWebSocket_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/WebSocket/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTWebSocket_union_hdrs",
  srcs = [
    "RCTWebSocket_hdrs",
    "React_hdrs",
    ":Core_hdrs",
    ":RCTBlob_hdrs",
    ":fishhook_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "RCTWebSocket_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":RCTWebSocket_union_hdrs"
  ],
  deps = [
    ":Core_hmap",
    ":RCTBlob_hmap",
    ":fishhook_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "RCTWebSocket_includes",
  include = [
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "RCTWebSocket",
  enable_modules = 0,
  srcs = glob(
    [
      "Libraries/WebSocket/*.m"
    ],
    exclude = glob(
      [
        "React/DevSupport/*.cc",
        "React/DevSupport/*.cpp",
        "React/DevSupport/*.cxx",
        "React/DevSupport/*.mm",
        "React/Inspector/*.cc",
        "React/Inspector/*.cpp",
        "React/Inspector/*.cxx",
        "React/Inspector/*.mm"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/DevSupport/*.S",
        "React/DevSupport/*.c",
        "React/DevSupport/*.m",
        "React/DevSupport/*.s",
        "React/Inspector/*.S",
        "React/Inspector/*.c",
        "React/Inspector/*.m",
        "React/Inspector/*.s"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/DevSupport/*.S",
        "React/DevSupport/*.c",
        "React/DevSupport/*.m",
        "React/DevSupport/*.s",
        "React/Inspector/*.S",
        "React/Inspector/*.c",
        "React/Inspector/*.m",
        "React/Inspector/*.s"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  hdrs = [
    ":RCTWebSocket_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    ":Core",
    ":RCTBlob",
    ":fishhook",
    ":RCTWebSocket_includes"
  ],
  copts = select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "RCTWebSocket_acknowledgement",
  deps = [],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "fishhook_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/fishhook/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fishhook_public_hdrs",
  srcs = glob(
    [
      "Libraries/fishhook/*.h"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fishhook_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/fishhook/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "fishhook_union_hdrs",
  srcs = [
    "fishhook_hdrs",
    "React_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "fishhook_hmap",
  namespace = "fishhook",
  hdrs = [
    "React_package_hdrs",
    ":fishhook_union_hdrs"
  ],
  deps = [],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "fishhook_includes",
  include = [
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "fishhook",
  enable_modules = 0,
  srcs = glob(
    [
      "Libraries/fishhook/*.c"
    ],
    exclude = glob(
      [
        "Libraries/WebSocket/*.m"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/DevSupport/*.cc",
        "React/DevSupport/*.cpp",
        "React/DevSupport/*.cxx",
        "React/DevSupport/*.mm",
        "React/Inspector/*.cc",
        "React/Inspector/*.cpp",
        "React/Inspector/*.cxx",
        "React/Inspector/*.mm"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/DevSupport/*.S",
        "React/DevSupport/*.c",
        "React/DevSupport/*.m",
        "React/DevSupport/*.s",
        "React/Inspector/*.S",
        "React/Inspector/*.c",
        "React/Inspector/*.m",
        "React/Inspector/*.s"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "React/DevSupport/*.S",
        "React/DevSupport/*.c",
        "React/DevSupport/*.m",
        "React/DevSupport/*.s",
        "React/Inspector/*.S",
        "React/Inspector/*.c",
        "React/Inspector/*.m",
        "React/Inspector/*.s"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  hdrs = [
    ":fishhook_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    ":fishhook_includes"
  ],
  copts = select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/fishhook/"
  ] + [
    "-fmodule-name=fishhook"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "fishhook_acknowledgement",
  deps = [],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "RCTLinkingIOS_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/LinkingIOS/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTLinkingIOS_public_hdrs",
  srcs = glob(
    [
      "Libraries/LinkingIOS/*.h"
    ],
    exclude_directories = 1
  ) + [
    ":Core_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTLinkingIOS_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/LinkingIOS/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTLinkingIOS_union_hdrs",
  srcs = [
    "RCTLinkingIOS_hdrs",
    "React_hdrs",
    ":Core_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "RCTLinkingIOS_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":RCTLinkingIOS_union_hdrs"
  ],
  deps = [
    ":Core_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "RCTLinkingIOS_includes",
  include = [
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "RCTLinkingIOS",
  enable_modules = 0,
  srcs = glob(
    [
      "Libraries/LinkingIOS/*.m"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":RCTLinkingIOS_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    ":Core",
    ":RCTLinkingIOS_includes"
  ],
  copts = select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "RCTLinkingIOS_acknowledgement",
  deps = [],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "RCTTest_direct_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/RCTTest/**/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTTest_public_hdrs",
  srcs = glob(
    [
      "Libraries/RCTTest/**/*.h"
    ],
    exclude_directories = 1
  ) + [
    ":Core_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTTest_hdrs",
  srcs = glob(
    glob(
      [
        "pod_support/Headers/Public/**/*"
      ],
      exclude_directories = 1
    ) + glob(
      [
        "Libraries/RCTTest/**/*.h"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "RCTTest_union_hdrs",
  srcs = [
    "RCTTest_hdrs",
    "React_hdrs",
    ":Core_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "RCTTest_hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":RCTTest_union_hdrs"
  ],
  deps = [
    ":Core_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "RCTTest_includes",
  include = [
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "RCTTest",
  enable_modules = 0,
  srcs = glob(
    [
      "Libraries/RCTTest/**/*.m"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":RCTTest_hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  sdk_frameworks = [
    "XCTest"
  ],
  deps = [
    ":Core",
    ":RCTTest_includes"
  ],
  copts = select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "RCTTest_acknowledgement",
  deps = [],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "_ignore_me_subspec_for_linting__direct_hdrs",
  srcs = glob(
    [
      "pod_support/Headers/Public/**/*"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "_ignore_me_subspec_for_linting__public_hdrs",
  srcs = [
    ":Core_public_hdrs",
    ":CxxBridge_public_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "_ignore_me_subspec_for_linting__hdrs",
  srcs = glob(
    [
      "pod_support/Headers/Public/**/*"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "_ignore_me_subspec_for_linting__union_hdrs",
  srcs = [
    "_ignore_me_subspec_for_linting__hdrs",
    "React_hdrs",
    ":Core_hdrs",
    ":CxxBridge_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "_ignore_me_subspec_for_linting__hmap",
  namespace = "React",
  hdrs = [
    "React_package_hdrs",
    ":_ignore_me_subspec_for_linting__union_hdrs"
  ],
  deps = [
    ":Core_hmap",
    ":CxxBridge_hmap"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "_ignore_me_subspec_for_linting__includes",
  include = [
    "Vendor/React/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "_ignore_me_subspec_for_linting_",
  enable_modules = 0,
  hdrs = [
    ":_ignore_me_subspec_for_linting__hdrs"
  ],
  pch = "pod_support/Headers/Private/React-prefix.pch",
  deps = [
    ":Core",
    ":CxxBridge",
    ":_ignore_me_subspec_for_linting__includes"
  ],
  copts = select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/React/pod_support/Headers/Public/React/"
  ] + [
    "-fmodule-name=React"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "_ignore_me_subspec_for_linting__acknowledgement",
  deps = [],
  value = "//Vendor/React/pod_support_buildable:acknowledgement_fragment"
)
