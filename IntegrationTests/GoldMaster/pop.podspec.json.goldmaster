load(
  "//Vendor/rules_pods/BazelExtensions:extensions.bzl",
  "pch_with_name_hint",
  "acknowledged_target",
  "gen_module_map",
  "gen_includes",
  "headermap"
)
# Add a config setting release for compilation mode
# Assume that people are using `opt` for release mode
# see the bazel user manual for more information
# https://docs.bazel.build/versions/master/be/general.html#config_setting
config_setting(
  name = "release",
  values = {
    "compilation_mode": "opt"
  }
)
config_setting(
  name = "osxCase",
  values = {
    "apple_platform_type": "macos"
  }
)
config_setting(
  name = "tvosCase",
  values = {
    "apple_platform_type": "tvos"
  }
)
config_setting(
  name = "watchosCase",
  values = {
    "apple_platform_type": "watchos"
  }
)
filegroup(
  name = "pop_cxx_hdrs",
  srcs = glob(
    [
      "pop/**/*.h"
    ],
    exclude_directories = 1
  ),
  visibility = [
    "//visibility:public"
  ]
)
filegroup(
  name = "pop_cxx_union_hdrs",
  srcs = [
    "pop_cxx_hdrs",
    "pop_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "pop_cxx_hmap",
  namespace = "pop",
  hdrs = [
    ":pop_cxx_union_hdrs"
  ],
  deps = [],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "pop_cxx_includes",
  include = [
    "Vendor/pop/pod_support/Headers/Public/"
  ]
)
objc_library(
  name = "pop_cxx",
  enable_modules = 0,
  srcs = glob(
    [
      "pop/**/*.cpp",
      "pop/**/*.mm"
    ],
    exclude = glob(
      [
        "pop/**/*.m"
      ],
      exclude_directories = 1
    ),
    exclude_directories = 1
  ),
  hdrs = [
    ":pop_cxx_union_hdrs"
  ],
  pch = pch_with_name_hint(
    "pop",
    glob(
      [
        "pop/**/*.pch"
      ],
      exclude_directories = 1
    )
  ),
  sdk_dylibs = [
    "c++"
  ],
  deps = [
    ":pop_cxx_includes"
  ],
  copts = [
    "-std=c++11",
    "-stdlib=libc++"
  ] + select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/pop/pod_support/Headers/Public/pop/"
  ] + [
    "-fmodule-name=pop_pod_module"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "pop_cxx_acknowledgement",
  deps = [],
  value = "//Vendor/pop/pod_support_buildable:acknowledgement_fragment"
)
filegroup(
  name = "pop_hdrs",
  srcs = glob(
    [
      "pod_support/Headers/Public/**/*"
    ],
    exclude_directories = 1
  ) + glob(
    [
      "pop/**/*.h"
    ],
    exclude_directories = 1
  ) + [
    ":pop_cxx_hdrs"
  ],
  visibility = [
    "//visibility:public"
  ]
)
headermap(
  name = "pop_hmap",
  namespace = "pop",
  hdrs = [
    ":pop_hdrs"
  ],
  deps = [
    ":pop_cxx"
  ],
  visibility = [
    "//visibility:public"
  ]
)
gen_includes(
  name = "pop_includes",
  include = [
    "Vendor/pop/pod_support/Headers/Public/"
  ]
)
gen_module_map(
  "pop",
  "pop_module_map",
  "pop",
  [
    "pop_hdrs"
  ]
)
objc_library(
  name = "pop",
  enable_modules = 0,
  srcs = glob(
    [
      "pop/**/*.m"
    ],
    exclude_directories = 1
  ),
  hdrs = [
    ":pop_hdrs"
  ],
  pch = pch_with_name_hint(
    "pop",
    glob(
      [
        "pop/**/*.pch"
      ],
      exclude_directories = 1
    )
  ),
  sdk_dylibs = [
    "c++"
  ],
  deps = [
    ":pop_cxx",
    ":pop_includes"
  ],
  copts = select(
    {
      "//conditions:default": [
        "-DPOD_CONFIGURATION_RELEASE=0"
      ],
      ":release": [
        "-DPOD_CONFIGURATION_RELEASE=1",
        "-DNS_BLOCK_ASSERTIONS=1"
      ]
    }
  ) + [
    "-IVendor/pop/pod_support/Headers/Public/pop/"
  ] + [
    "-fmodule-name=pop_pod_module"
  ],
  visibility = [
    "//visibility:public"
  ]
)
acknowledged_target(
  name = "pop_acknowledgement",
  deps = [],
  value = "//Vendor/pop/pod_support_buildable:acknowledgement_fragment"
)
