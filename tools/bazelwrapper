#!/bin/bash

set -e

# Make sure we're in the project root directory.
SCRIPTPATH="$( cd "$( dirname "${BASH_SOURCE[0]}"  )" && pwd  )"
pushd "$SCRIPTPATH/.." > /dev/null

function exit_trap() {
  popd 2 &> /dev/null
  if [[ ! -z $BAZEL_DEBUG_ACTION_CACHE ]]; then
    echo "INFO: dumping action cache post"
    mkdir -p bazel-diags
    $BAZEL dump --action_cache > bazel-diags/bazel-action-cache-post.txt
  fi
}

trap exit_trap EXIT

# Go to bazel release page
# These are typically posted in groups.google
# https://groups.google.com/forum/#!forum/bazel-discuss
BAZEL_VERSION="0.22.0"
BAZEL_VERSION_SHA="adae5bbc3bf2b9b60d460d8ea2c65da1a6edd75b242439dfc49d001272548d13"
BAZEL_VERSION_URL="https://github.com/bazelbuild/bazel/releases/download/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-darwin-x86_64.sh"

BAZEL_ROOT="$HOME/.bazelenv/versions/$BAZEL_VERSION"
BAZEL_PATH="$BAZEL_ROOT/bin/bazel"
XCODE_SELECT_ENV_PATH="${SCRIPTPATH}/.xcode_select_env"
LEGACY_BAZEL_PATH="$SCRIPTPATH/../Scripts/bazel/bin/bazel"

BAZEL=""

function install_bazel() {
    curl -L "$BAZEL_VERSION_URL" > $PWD/install_bazel.sh
    SHA=$(shasum -a 256 install_bazel.sh | awk '{ print $1 }')
    if [[ $SHA == $BAZEL_VERSION_SHA ]]; then
        chmod +x install_bazel.sh
        $PWD/install_bazel.sh --prefix="$BAZEL_ROOT" && rm install_bazel.sh
    else
        echo "You version of bazel is out of date; ask for help in #cx-ios"
        exit 1
    fi
}

# Check if we have the correct version of bazel installed in the home
# directory.
# Fallback to ./Scripts/bazel/bin/bazel for legacy installations
# Lastly, check if there is one installed on the path
if [[ -e "$BAZEL_PATH" ]]; then
  BAZEL="$BAZEL_PATH"
elif [[ -e "$LEGACY_BAZEL_PATH" ]] && [[ $("$LEGACY_BAZEL_PATH" version | head -n1 | awk '{ print $3 }') == "$BAZEL_VERSION" ]]; then
  BAZEL="$LEGACY_BAZEL_PATH"
elif [[ -e $(which bazel) ]] && [[ $($(which bazel) version | head -n1 | awk '{ print $3 }') == "$BAZEL_VERSION" ]]; then
  BAZEL=$(which bazel)
fi

# Ensure we can execute the path for bazel and that it's the correct version
if ! [[ -e "$BAZEL" ]]; then
  echo "WARNING: Missing installation or incorrect bazel version ($BAZEL_VERSION)" >&2;
  echo "Installing Bazel $BAZEL_VERSION to $BAZEL_PATH" >&2;
  install_bazel
  BAZEL=$BAZEL_PATH
fi

if [[ -x "${BAZEL}" ]]; then
  CURRENT_XCODE_PATH="$(/usr/bin/xcode-select -p)"
  XCODE_VERSION=$(/usr/bin/xcodebuild -version | grep Xcode | cut -d ' ' -f2)
  CURRENT_XCODE_HASH="${CURRENT_XCODE_PATH}-${XCODE_VERSION}-${BAZEL_VERSION}"
  if [[ -f "${XCODE_SELECT_ENV_PATH}" ]]; then
    EXISTING_XCODE_HASH="$(cat "${XCODE_SELECT_ENV_PATH}")"
    if [[ $EXISTING_XCODE_HASH != $CURRENT_XCODE_HASH ]]; then
      echo "Xcode select path or Bazel version has changed, must clear cached data"
      $BAZEL clean --expunge
    fi
  fi
  echo "${CURRENT_XCODE_HASH}" > $XCODE_SELECT_ENV_PATH

  if [[ ! -z $BAZEL_FORCE_CLEAN ]]; then
    echo "INFO: Bazel force cleaning"
    $BAZEL clean --expunge
  fi

  if [[ ! -z $BAZEL_DEBUG_ACTION_CACHE ]]; then
    echo "INFO: dumping action cache pre"
    mkdir -p bazel-diags
    $BAZEL dump --action_cache > bazel-diags/bazel-action-cache-pre.txt
  fi

  # Make variable support
  # In the context of Xcode builds, variables are defined as "Make variable"
  # strings.
  # In practice, the variables are stored as strings, and then later assigned to
  # the value of the current environment.
  ARGS=()
  for ARG in "$@"; do
      if [[ "$ARG" =~ \$(.*) ]]; then
        # Get the name of the make variable
        MAKEVAR=$(echo $ARG | sed 's,.*\$(\(.*\)).*,\1,g')
        # Next, parameter expansion of the variable by name
        VALUE="${!MAKEVAR}"
        REPLACED="$(echo $ARG | sed "s,\$(\(.*\)),$VALUE,g")"
        ARGS+=(${REPLACED})
      else
        ARGS+=("${ARG}")
      fi
  done

  # Exec in a subshell in order to trap
  (exec -a "$0" /usr/bin/env - TERM="${TERM}" SHELL="${SHELL}" PATH="${PATH}" HOME="${HOME}" "${BAZEL}" "${ARGS[@]}")
else
  echo "WARNING: Missing installation of bazel" >&2;
  exit 1
fi
